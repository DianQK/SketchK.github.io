<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SketchK&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sketchk.xyz/"/>
  <updated>2017-03-26T13:20:19.000Z</updated>
  <id>http://sketchk.xyz/</id>
  
  <author>
    <name>SketchK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Guide Of Making Your Personal Blog - Part 7</title>
    <link href="http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-7/"/>
    <id>http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-7/</id>
    <published>2017-03-24T15:42:36.000Z</published>
    <updated>2017-03-26T13:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于把教程写完了，现在让我总结一下！</p>
<a id="more"></a>
<h2 id="Afterword"><a href="#Afterword" class="headerlink" title="Afterword"></a>Afterword</h2><p>要想搭建一个优雅且功能强大的博客远不止我说的这些内容，要想深入的话其实还有很多可以讨论的内容。</p>
<p>不过我打算就此停止关于如何搭建个人博客的话题了！</p>
<p>在这里要感谢很多这段时间给予我帮助的朋友 - 恩生，樉爷，宇杰，还有在 GitHub 上的好朋友 <a href="https://github.com/farseerfc" target="_blank" rel="external">@farseerfc</a> 和 <a href="https://github.com/PoiScript" target="_blank" rel="external">@PoiScript</a></p>
<p>好了， A Guide Of Making Your Personal Blog 系列就此完结啦！</p>
<p>希望大家也能早日搭建出属于自己的博客！</p>
<h2 id="Reference-Material"><a href="#Reference-Material" class="headerlink" title="Reference Material"></a>Reference Material</h2><ul>
<li>域名购买推荐使用 <strong>GoDaddy</strong> : <a href="http://www.godaddy.com/" target="_blank" rel="external">http://www.godaddy.com/</a></li>
<li>GoDaddy 的优惠码： <a href="http://www.dute.me/" target="_blank" rel="external">http://www.dute.me/</a></li>
<li>GitHub 的官网： <a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></li>
<li>GitHub Pages 的官网: <a href="https://pages.github.com/" target="_blank" rel="external">https://pages.github.com/</a></li>
<li>Travis CI 的官网：<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a></li>
<li>域名解析的服务商推荐使用 <strong>DNSPods</strong>: <a href="https://www.dnspod.cn/" target="_blank" rel="external">https://www.dnspod.cn/</a></li>
<li>博客框架推荐使用 <strong>hexo</strong> 框架： <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a></li>
<li>博客主题推荐使用 <strong>NexT</strong> 主题： <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a></li>
<li><strong>Git</strong> 的官网： <a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a></li>
<li><strong>Node.js</strong> 的官网： <a href="https://nodejs.org/zh-cn/" target="_blank" rel="external">https://nodejs.org/zh-cn/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于把教程写完了，现在让我总结一下！&lt;/p&gt;
    
    </summary>
    
      <category term="DIY" scheme="http://sketchk.xyz/categories/DIY/"/>
    
      <category term="Blog" scheme="http://sketchk.xyz/categories/DIY/Blog/"/>
    
    
      <category term="Blog" scheme="http://sketchk.xyz/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://sketchk.xyz/tags/Hexo/"/>
    
      <category term="Next" scheme="http://sketchk.xyz/tags/Next/"/>
    
      <category term="Travis CI" scheme="http://sketchk.xyz/tags/Travis-CI/"/>
    
      <category term="Domain" scheme="http://sketchk.xyz/tags/Domain/"/>
    
      <category term="GitHub Pages" scheme="http://sketchk.xyz/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>A Guide Of Making Your Personal Blog - Part 6</title>
    <link href="http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-6/"/>
    <id>http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-6/</id>
    <published>2017-03-24T15:42:33.000Z</published>
    <updated>2017-03-26T13:29:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一节讨论的内容是博客的自动部署问题，应该算是一个比较高级的话题了，不过实现了这一步，我们就可以”自由”的发布文章啦！</p>
<a id="more"></a>
<h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>使用 <code>Hexo</code> 写博客是一件十分幸福的事，但让很不爽的是每次写完 <code>markdown</code> 文档后都要手动生成静态文件并重新部署到 <code>Github</code> 上，反复的操作不禁让人感到厌烦。</p>
<p>虽然上面的问题可以用脚本来解决，但这并不能解决所有的问题，假如我们换了一台电脑就需要重新安装 <code>Git</code>, <code>Node.js</code>，<code>Hexo</code>等等，这其实也挺麻烦的。</p>
<p>那么有什么好的解决方案呢？</p>
<h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>在说 <code>Travis CI</code> 之前，我们先说说持续集成，持续交付和持续部署的概念。</p>
<ul>
<li>持续集成（Continuous integration）就是频繁地（一天多次）将代码集成到主干。它的目的就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-c5c8e6f40c7c133e22402c00bb7e1a25_b.png" alt=""></p>
<ul>
<li>持续交付（Continuous delivery）在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的 “类生产环境”（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的测试环境中。如果代码没有问题，可以继续手动部署到生产环境中。</li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-040402.jpg" alt=""></p>
<ul>
<li>持续部署（continuous deployment）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。持续部署的前提是能自动化完成测试、构建、部署等步骤。</li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-f96f19e4d567aad5006d841963a86e41_b.png" alt=""></p>
<p>说完这三个概念，我们来说说 <code>Travis CI</code>，你可以把它理解为一种服务。总之它的主要任务就是处理持续集成，持续交付和持续部署的相关事宜，而且很重要的一点就是它对 <code>GitHub</code> 的支持十分友好，加上它的免费策略，我们没有理由不去选择它，当然你也完全可以用 <a href="https://jenkins.io/" target="_blank" rel="external">Jenkins</a> 等类似的服务。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-26-Travis-CI-logo.jpg" alt=""></p>
<p>好了，<code>Travis CI</code> 的介绍到此结束了，我们下面就来说说如何利用 <code>Travis CI</code> 来实现自动部署吧。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>Travis CI</code> 的工作原理是在每次提交 <code>commit</code> 到 <code>Github</code> 后，它会自动检测到我们的提交，此时 <code>Travis CI</code> 会生成一个虚拟机，它会根据我们写好的指令进行相关的操作。</p>
<p>那么我们到底要怎么干呢？我们来罗列下相应的步骤</p>
<ul>
<li>我们在 <code>Github</code> 的博客仓库里新建一个 <code>blog-source</code> 分支，然后把博客的源码托管到这个分支</li>
<li>每当我们在本地写好了博文之后，把修改 <code>push</code> 到该分支</li>
<li><code>Travis CI</code> 上可以对这个项目的 <code>blog-source</code> 分支设置 <code>webhook</code>，每当检测到 <code>push</code> 的时候就去仓库 <code>clone</code> 源代码</li>
<li><code>Travis CI</code> 执行构建脚本</li>
<li><code>Travis CI</code> 把构建结果通过 push 部署到 master 分支的仓库里</li>
</ul>
<p>如果看文字比较晕，可以看看我画的这张图。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-Jietu20170321-141558-2x.jpg" alt=""></p>
<p>我想结合着文字和图片，你已经明白我们要干什么了，所以如果我们实现了这个方案，在这样的自动化流程下，我们唯一需要做的事情就是 <code>push</code> 文章到 <code>blog-source</code> 分支，其他的事情交给 Travis CI 了。</p>
<p>是不是突然觉得世界都美好了呢，好了，开始干活吧！</p>
<blockquote>
<p>这次的实践需要掌握一些基本的 <code>Git</code> 命令，如果对 <code>Git</code> 命令不熟悉，建议看看<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的 Git 教程</a></p>
</blockquote>
<h2 id="创建-blog-source-分支"><a href="#创建-blog-source-分支" class="headerlink" title="创建 blog-source 分支"></a>创建 blog-source 分支</h2><p>如果你对 <code>Git</code> 的相关操作比较熟悉，这一步应该相当简单，不过为了便于大家的理解和保持文章的一致性，我们还是把这个步骤中的相关操作写下来。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /path/of/your/blog/<span class="built_in">source</span>/</div><div class="line">$ git init</div><div class="line">$ git checkout -b blog-source</div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"XXX"</span></div><div class="line">$ git remote add origin git@github.com:XXX/XXX.github.io.git</div><div class="line">$ git push -u origin blog-source</div></pre></td></tr></table></figure>
<p>简单的解释下吧：</p>
<ul>
<li>第 1 行是利用 <code>cd</code> 命令跳到站点根目录下</li>
<li>第 2 行是在这个文件夹下利用 <code>git init</code> 命令初始化仓库</li>
<li>第 3 行是在当前仓库创建一个 <code>blog-source</code> 分支</li>
<li>第 4，5 行是在进行一次 <code>commit</code> 操作，用来保存当前的修改，<code>XXX</code> 是用于记录此次 <code>commit</code> 的信息</li>
<li>第 6 行是将本地仓库与 <code>github</code> 中的仓库关联到一起，这里的 <code>XXX</code> 是你的 <code>GitHub ID</code></li>
<li>第 7 行是将本地的分支推送到远端的 <code>blog-source</code> 分支中</li>
</ul>
<p>最后的效果就是，当你点击 <code>branch</code> 按钮的时候，你会发现多了一个 <code>blog-source</code> 分支。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-065531.jpg" alt=""></p>
<p>不过在结束这一步之前，让我们来看一下 <code>blog-source</code> 分支中的 <code>themes</code> 文件夹，你会发现 <code>next</code> 文件夹是一个空文件夹，里面并没有任何文件，这是为什么呢？</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-22-Jietu20170322-165659.jpg" alt=""></p>
<p>原因很简单，就是之前我们使用了 <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code> 的方式引入第三方主题，这个命令会在本地电脑的 <code>next</code> 文件夹下生成 <code>.git</code> 文件夹，这也就意味着 <code>next</code> 文件夹也使用了 <code>Git</code> 来进行版本管理，自然而然的这个 <code>next</code> 文件夹就不会纳入到站点根目录的版本管理中。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-22-093535.jpg" alt=""></p>
<p>所以把 <code>next</code> 文件夹下的 <code>.git</code> 文件删除，重新进行一次提交。</p>
<h2 id="配置-Travis-CI"><a href="#配置-Travis-CI" class="headerlink" title="配置 Travis CI"></a>配置 Travis CI</h2><h3 id="开启仓库的-Travis-CI-功能"><a href="#开启仓库的-Travis-CI-功能" class="headerlink" title="开启仓库的 Travis CI 功能"></a>开启仓库的 Travis CI 功能</h3><p>登录 <a href="https://travis-ci.org/" target="_blank" rel="external"><code>Travis CI</code></a> 的网站，使用 <code>GitHub</code> 账户登录，成功登录后点击右边的头像，会弹出来个下拉菜单，点击 <code>Accounts</code> 按钮</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-072723.jpg" alt=""></p>
<p>这时候你会在界面上看到你在 <code>GitHub</code> 里的所有仓库，我们只需要打开存有博客资源的仓库即可。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-075505.jpg" alt=""></p>
<p>这时候点击 <code>SketchK/SketchK.github.io</code> 会跳入这个项目的详情页，点击右上角的 <code>More options</code> 里的 <code>Setting</code> 按钮，就会进入下面的页面，我们可以打开 <code>build only if .travvis.yml is present</code> 和 <code>build branch updates</code>， 至于 <code>build pull request updates</code> 可以根据自己的实际情况来选择是否开启。</p>
<blockquote>
<p>我完全不知道这四个选项代表啥意思啊 ？</p>
</blockquote>
<p>好吧，如果你不愿意看 <code>Travis CI</code> 的<a href="https://docs.travis-ci.com/" target="_blank" rel="external">文档</a>话，我简单说一下这四个选项的意思</p>
<ul>
<li><code>Build only if .travis.yml is present</code>：是否在 <code>.travis.yml</code> 文件存在的情况下开始才构建；</li>
<li><code>Build pushes</code>：是否在推送完这个分支后开始构建。</li>
<li><code>Limit concurrent jobs</code>: 是否限制同时执行的操作数量</li>
<li><code>Build pull request updates</code>：是否在 PR 合入后执行构建</li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-Jietu20170321-160825-2x.jpg" alt=""></p>
<p>到这一步， 我们已经开启了要构建的仓库，但此时 <code>Travis CI</code> 还没法帮助我们自动构建并部署。</p>
<h3 id="push-权限"><a href="#push-权限" class="headerlink" title="push 权限"></a>push 权限</h3><p>我们在使用 <code>Github</code> 的时候，首先需要在 <code>Github</code> 上配置公钥，这是最基础的。那么，存在我们本地的私钥就是你的个人身份标示，如果你的项目 <code>git</code> 地址配置的是 <code>git@github.com:username/projectname.git</code>（相对的还有 <code>https://github.com/username/projectname.git</code>），当你对仓库进行一些操作（比如 <code>push</code> 等），则需要私钥进行身份验证了（这是自动验证的，如果是使用 <code>https</code> 的配置，则需要提供用户名和密码）。</p>
<p>我们在 <code>Travis CI</code> 上自动部署代码，就牵扯到了 <code>push</code> 操作，那么就需要提供私钥了。所以我们该怎么解决这个问题呢？</p>
<p>你会说把我们本地的私钥上传到 <code>blog-source</code> 里就 ok 啦，当然这么做理论上是没有任何错误的。</p>
<p>但你得知道，我们在 <code>GitHub</code> 的仓库可是公开的，也就是说谁都可以看到你的私钥了，这样的话，原本用来保密的私钥就失去了意义，更可怕的是，如果被一些居心不良的人盯上你的私钥，你可能就会遇上麻烦了。</p>
<p>那么我们该怎么办呢？</p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>目前网上主流的做法都是基于 <code>Travis</code> 提供了加密文件的支持，但具体的实现会有一些不同，什么意思呢？</p>
<p>一种方式就是我们可以在本地对文件（这里指私钥，比如 <code>id_rsa</code> 文件）进行加密，然后把加密过后的文件放在项目里，那么别人就无法获取里面的真实内容。然后我们在让 <code>Travis</code> 执行脚本的时候，在读取加密文件之前对文件进行解密（使用的解密密码需要提前在 <code>Travis</code> 上配置好），这样就可以达到不将文件内容暴露，并且让 <code>Travis</code> 获取到真实内容的目的了，大概流程如下：</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-24-Jietu20170324-145042-2x.jpg" alt=""></p>
<p>第二种方式是利用了 <code>GitHub</code> 的 <code>Personal Access Token</code>，由于这个 <code>Token</code> 与 帐号密码 以及 <code>SSH Keys</code> 同样具有 <code>Github</code> 写入能力，因此只要使用 <code>Travis CI</code> 提供的加密工具来加密这个 <code>Token</code> 即可。 它的流程如下</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-24-Jietu20170324-154302-2x.jpg" alt=""></p>
<p>虽然这两种方式都可以解决问题，但实际操作起来都很麻烦，难道就没有什么别的方式了么 ？</p>
<p>好在 <code>Travis CI</code> 提供了一个 <code>Environment Variables</code> 这个功能，那么我们完全可以使用一种简单的方式来实现我们的目的。</p>
<ul>
<li>在 <code>GitHub</code> 的 <code>Personal Access Token 中创建 Token</code></li>
<li>将 <code>Token</code> 的 <code>value</code> 值添加到 <code>Travis CI</code> 的 <code>Environment Variables</code></li>
<li>对远程仓库的 <code>push</code> 操作使用如下方式来完成。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -f -q https://&lt;username&gt;:$GITHUB_TOKEN@github.com/&lt;username&gt;/&lt;repo&gt;</div></pre></td></tr></table></figure>
<p>是不是看起来，还不错，下面就让我们开干吧！</p>
<blockquote>
<p>这种 push 方法出自另一家 CI 服务公司 AppVeyor 的文档，详情请点击<a href="https://www.appveyor.com/docs/how-to/git-push" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<h3 id="生成-Personal-Access-Token"><a href="#生成-Personal-Access-Token" class="headerlink" title="生成 Personal Access Token"></a>生成 Personal Access Token</h3><p>登录 <code>GitHub</code> 的 <code>Setting</code> 页面，点击右边侧边栏的 <code>Personal access tokens</code> 后，进入下图所示的界面，此时点击右上角的 <code>Generate new token</code> 按钮</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-Jietu20170321-185415-2x.jpg" alt=""></p>
<p>点击完以后会要求你重新输入一遍 <code>GitHub</code> 的密码，然后就会进入下面的界面，这个界面大概是在说我们应该赋予这个 <code>token</code> 的权限有哪些，根据目前的要求，我们只需要把 <code>repo</code> 选项框里的前两个权限勾上即可，如果你的博客有一些特殊的需求，就根据自己的情况选择吧。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-24-Jietu20170324-160029-2x.jpg" alt=""></p>
<p>勾选完后，点击最底下的 <code>Generate Token</code> 按钮，你就会得到一个 <code>token</code>，唯一需要注意的是 <code>token</code> 的值只会显示一次，所以记得把这个值保存一下。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-26-Jietu20170326-211812.jpg" alt=""></p>
<h3 id="在-Travis-CI-上设置-Environment-Variables"><a href="#在-Travis-CI-上设置-Environment-Variables" class="headerlink" title="在 Travis CI 上设置 Environment Variables"></a>在 Travis CI 上设置 Environment Variables</h3><p>现在让我们回到 <code>Travis CI</code> 的界面中，把 <code>Token</code> 的 <code>Name</code> 和 <code>Token</code> 的 <code>Valve</code> 填到 <code>Environment Variables</code> 中，然后再点击下 <code>Add</code> 按钮。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-21-112534.jpg" alt=""></p>
<p>现在 <code>Travis CI</code> 通过我们的设置已经与 <code>Personal Access Token</code> 产生了关联。</p>
<h3 id="神奇的-travis-yml-文件"><a href="#神奇的-travis-yml-文件" class="headerlink" title="神奇的 .travis.yml 文件"></a>神奇的 .travis.yml 文件</h3><p>在 Travis CI 的<a href="https://docs.travis-ci.com/user/customizing-the-build/#The-Build-Lifecycle" target="_blank" rel="external">官方文档里有这么一段话</a>:</p>
<blockquote>
<p>Travis CI provides a default build environment and a default set of steps for each programming language. You can customize any step in this process in <code>.travis.yml</code>. Travis CI uses <code>.travis.yml</code> file in the root of your repository to learn about your project and how you want your builds to be executed. <code>.travis.yml</code> can be very minimalistic or have a lot of customization in it.</p>
</blockquote>
<p>它的大体意思是说 <code>Travis CI</code> 为不同的编程语言提供了不同的编程环境，我们可以用一个叫 <code>.travis.yml</code> 的文件定义 <code>Travis CI</code> 需要执行的任务，同时我们需要把这个文件保存到站点根目录中。</p>
<p>既然 <code>.travis.yml</code> 是用来控制 Travis CI 的，那么我们应该如何编写这个文件呢？</p>
<p>在编写这个文件之前，我们不妨先说说 <code>Travis C</code>I 的构建周期，如果你不太理解构建周期的意思，我们来打个比方吧。比如我们办事的时候总会有个第一步，第二步，直到最后一步，我们可以把这个过程理解为构建周期，而第一步，第二步之类的概念理解为这个构建周期的时间节点。</p>
<p>那么 <code>Travis CI</code> 的构建周期主要分两步：</p>
<ol>
<li><code>install</code> 用于安装构建所需要的一些依赖</li>
<li><code>script</code> 运行构建脚本</li>
</ol>
<p>而 <code>Travis CI</code> 提供了下面 12 种标签来描述一次构建周期的各个时间节点：</p>
<ul>
<li><code>Install apt addons</code>: 在这个节点中，可以使用 <code>apt</code> 包管理器来安装一些依赖包</li>
<li><code>Install cache components</code>: 这个节点的作用是缓存一些不常改变的东西，可以加快编译速度</li>
<li><code>before_install</code> 这个节点是指在 <code>install</code> 步骤之前的动作</li>
<li><code>install</code>: 这个节点的作用是用来安装依赖或者工具</li>
<li><code>before_script</code>: 这个节点是指在 <code>script</code> 执行之前的动作</li>
<li><code>script</code>: 这个节点下的动作是由 <code>bash</code> 来解析的，这里放构建的主要步骤</li>
<li><code>before_cache</code>: 这个节点主要用于清除 <code>cache</code></li>
<li><code>after_success</code> or <code>after_failure</code>: 这个节点是指在构建成功或者构建失败后的动作</li>
<li><code>before_deploy</code>: 这个节点是指在部署之前的动作</li>
<li><code>deploy</code>: 这个节点是执行相应的部署操作</li>
<li><code>after_deploy</code>: 这个节点是指部署之后的动作</li>
<li><code>after_script</code>: 这个节点就是在 <code>script</code> 执行之后的动作</li>
</ul>
<p>看了这么多的标签是不是有点懵，其实在实际的使用过程中，我们并不会用那么多的标签。</p>
<p>说的有点多了，直接把 <code>.travis.yml</code> 的代码放上来吧。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="attr">language:</span> <span class="string">node_js</span></div><div class="line"></div><div class="line"><span class="attr">node_js:</span> <span class="string">stable</span></div><div class="line"></div><div class="line"><span class="attr">branches:</span></div><div class="line"><span class="attr">  only:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">blog-source</span></div><div class="line"><span class="bullet">  -</span> <span class="string">blog-theme</span></div><div class="line"></div><div class="line"><span class="attr">install:</span></div><div class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></div><div class="line"></div><div class="line"><span class="attr">before_script:</span></div><div class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"SketchK"</span></div><div class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"zhangsiqi1988@gmail.com"</span></div><div class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">push.default</span> <span class="string">simple</span></div><div class="line"></div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">--branch</span> <span class="string">master</span> <span class="attr">https://github.com/sketchk/sketchk.github.io.git</span> <span class="string">.deploy/sketchk.github.io</span></div><div class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="bullet">--branch</span> <span class="string">blog-theme</span> <span class="attr">https://github.com/SketchK/SketchK.github.io.git</span> <span class="string">themes/next</span></div><div class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></div><div class="line"><span class="bullet">-</span> <span class="string">cp</span> <span class="bullet">-R</span> <span class="string">public/*</span> <span class="string">.deploy/sketchk.github.io</span></div><div class="line"><span class="bullet">-</span> <span class="string">cd</span> <span class="string">.deploy/sketchk.github.io</span></div><div class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></div><div class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Travic CI Auto Build"</span></div><div class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">--quiet</span> <span class="attr">https://SketchK:$&#123;TraviS</span> <span class="string">CI</span> <span class="bullet">-</span> <span class="string">Hexo&#125;@github.com/SketchK/SketchK.github.io.git</span></div></pre></td></tr></table></figure>
<p>现在我们对这个文件分段说明下：</p>
<h4 id="install-标签之前的操作"><a href="#install-标签之前的操作" class="headerlink" title="install 标签之前的操作"></a>install 标签之前的操作</h4><p><code>install</code> 标签之前我们填写了 <code>language</code>, <code>node_js</code>, <code>cache</code> 以及 <code>branches</code> 标签，</p>
<p><code>language</code> 和 <code>node_js</code> 分别告诉 <code>Travis CI</code> 我们需要使用 <code>node.js</code>，它的版本是 <code>stable</code> 的。</p>
<p><code>branch</code> 部分的代码是告诉 <code>Travis CI</code> 只监控 <code>blog-source</code> 分支的变化，只有这个分支产生变化了才会执行下面的操作。或许你会好奇 <code>blog-source</code> 分支具体产生何种变化才会开始构建？其实我们在前面已经设定过了，如果忘了，请仔细看看 <code>开启仓库的 Travis CI 功能</code> 一节的内容。</p>
<h4 id="install-标签中的操作"><a href="#install-标签中的操作" class="headerlink" title="install 标签中的操作"></a>install 标签中的操作</h4><p>你肯定会好奇 <code>Travis CI</code> 是如何生成静态网页的，因为我们好像似乎没有告诉它应该去安装 <code>Hexo</code> 和其他相应的 <code>Hexo</code> 插件，只是在 <code>.travis.yml</code> 中输入了一句 <code>npm install</code> 的命令。</p>
<p>这时候我们需要看看几个没说过东西，下图是我们站点根目录的截图：</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-24-100818.jpg" alt=""></p>
<p>第一个就是 <code>package.json</code>, 打开它会发现该文件指定了我们所需要的 <code>Hexo</code> 和相应插件，而它是怎么知道的呢？其实这个文件是我们在本地配置 Hexo 及其相关插件时自动生成的，所以通过这个文件，<code>Travis CI</code> 在 执行 <code>npm install</code> 的时候就知道应该去下载何种软件，保证我们在执行 <code>hexo g</code> 的时候不会出错。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-24-Jietu20170324-180913-2x.jpg" alt=""></p>
<p>第二个就是 <code>node_modules</code>，Travis CI 通过 <code>package.json</code> 文件的内容去下载 <code>Hexo</code> 和相应插件，但下载完的东西需要放到哪里呢？<code>node_modules</code> 就是用来解决这个问题的。不过我们在 <code>blog-source</code> 分支中并没有看到这个文件夹，一方面是 <code>.gitignore</code> 里标明了排除这个文件夹，另一方面就是我们把 <code>node_modules</code> 文件夹里的内容 <code>push</code> 到 <code>blog-source</code> 上是没有意义的, 安装 <code>Hexo</code> 的工作可不是简单的把 <code>node_modules</code> 文件上传到 <code>Travis CI</code> 上就完事的。</p>
<h4 id="before-script-标签中的操作"><a href="#before-script-标签中的操作" class="headerlink" title="before_script 标签中的操作"></a>before_script 标签中的操作</h4><p>在执行具体的工作前，我们需要告诉 <code>Travis CI</code> 执行 <code>Git</code> 命令的操作者是谁，否则你的操作会出问题哦！另外记得加 <code>--global</code> 参数</p>
<h4 id="script-标签中的操作"><a href="#script-标签中的操作" class="headerlink" title="script 标签中的操作"></a>script 标签中的操作</h4><p>这一段的代码与我们之前的 <code>deploy.sh</code> 文件的代码十分相似。不过需要需要注意的是我们这次 <code>push</code> 的地址是与之前的方式不一样的，它的通用样式如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push https://&lt;username&gt;:<span class="variable">$GITHUB_TOKEN</span>@github.com/&lt;username&gt;/&lt;repo&gt;</div></pre></td></tr></table></figure>
<p>不过就像我的示例代码中，在 <code>push</code> 后面一定要加 <code>--quiet</code> 参数，因为不加这个参数的时候会把 <code>$GITHUB_TOKEN</code> 的具体值显示出来，这样我们之前的加密工作就白费了</p>
<h2 id="几个需要注意的地方"><a href="#几个需要注意的地方" class="headerlink" title="几个需要注意的地方"></a>几个需要注意的地方</h2><ul>
<li><p>如果你的 <code>Travis CI</code> 没有提示任何错误，但打开网站发现一片空白，那么八成就是你的 <code>themes</code> 文件夹出现了问题，可以仔细排查下这一块的代码和逻辑。</p>
</li>
<li><p><code>- git config --global push.default simple</code> 是 <code>Git 2.0</code> 带来的改变，如果我们不写这句话，在 <code>Travis CI</code> 里会看到一些 <code>warning</code> ，不过没有它似乎也不会有什么问题，只是后面的参数为 <code>simple</code> 的时候，执行 <code>git push</code> 且 没有指定分支时，只有当前分支会被 <code>push</code> 到对应的远程仓库。</p>
</li>
<li><p>如果你的 <code>Token</code> 中有一些特殊操作符，那么在进行 push 操作时，你可以像我的示例代码中一样使用 <code>{ }</code> 的方式把 <code>Token</code> 包起来，如果没有空格直接按照通用样式就可以了。</p>
</li>
<li><p>至于为什么把 <code>push</code> 操作放到 <code>script</code> 中，这是因为 <code>Travis CI</code> 判断构建项目的成功与失败主要在 <code>script</code> 中完成，如果我们把 <code>push</code> 操作放到 <code>after_script</code> 或者 <code>after_success</code> 中，即使 <code>push</code> 失败了，<code>Travis CI</code> 也会显示此次的构建成功。所以为了能够保证自动部署的成功，我把这个步骤放到了 <code>script</code> 中。</p>
</li>
</ul>
<h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p>做完这些工作后，我们把修改好的文件 <code>push</code> 到 <code>blog-source</code> 分支吧。然后再回到 <code>Travis CI</code> 的控制台看看发生了什么？</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-23-032710.jpg" alt=""></p>
<p>果不其然，<code>Travis CI</code> 已经检测到变化并进行构建部署了！ 点击下面的 <code>Job Log</code> 可以查看整个构建过程。</p>
<p>如果构建失败的话，也不用害怕，<code>Job Log</code> 里会有详细的信息。这些信息足够你去解决它们了。</p>
<p>现在，你终于完成了个人博客的自动部署工作了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一节讨论的内容是博客的自动部署问题，应该算是一个比较高级的话题了，不过实现了这一步，我们就可以”自由”的发布文章啦！&lt;/p&gt;
    
    </summary>
    
      <category term="DIY" scheme="http://sketchk.xyz/categories/DIY/"/>
    
      <category term="Blog" scheme="http://sketchk.xyz/categories/DIY/Blog/"/>
    
    
      <category term="Blog" scheme="http://sketchk.xyz/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://sketchk.xyz/tags/Hexo/"/>
    
      <category term="Next" scheme="http://sketchk.xyz/tags/Next/"/>
    
      <category term="Travis CI" scheme="http://sketchk.xyz/tags/Travis-CI/"/>
    
      <category term="Domain" scheme="http://sketchk.xyz/tags/Domain/"/>
    
      <category term="GitHub Pages" scheme="http://sketchk.xyz/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>A Guide Of Making Your Personal Blog - Part 5</title>
    <link href="http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-5/"/>
    <id>http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-5/</id>
    <published>2017-03-24T15:42:29.000Z</published>
    <updated>2017-03-26T13:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>估计你早就对当前这个博客的样式感到不满了，所以这一章我们来讨论下 Hexo 主题并亲手配置一下它吧！</p>
<a id="more"></a>
<h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p>使用 <code>Hexo</code> 框架可以使用不同样式的主题，它们被放在了<a href="https://hexo.io/themes/" target="_blank" rel="external">这里</a>，你可以随意挑选一个自己喜欢的。</p>
<p>估计这时候你已经选出了自己喜欢的主题，但你很快就会发现大部分主题的说明文档并不是那么友好，所以我们应该怎么办呢？</p>
<p>幸运的是 <a href="https://theme-next.iissnan.com/" target="_blank" rel="external"><code>NexT</code></a> 主题拥有一套完整的说明文档，所以今天就拿它举例了。</p>
<h3 id="config-yml-文件"><a href="#config-yml-文件" class="headerlink" title="_config.yml 文件"></a>_config.yml 文件</h3><p>在 <code>Hexo</code> 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 <code>Hexo</code> 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为<strong>站点配置文件</strong>， 后者称为<strong>主题配置文件</strong>。</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>在终端窗口下，定位到站点根目录下。输入以下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> your-hexo-site</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 <code>Hexo</code> 主题启用的模式一样。 当完成 <code>git cloen</code> 后，打开站点配置文件， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
<p>到此，<code>NexT</code> 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 <code>Hexo</code> 的缓存。</p>
<h3 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h3><p>启动 <code>Hexo</code> 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>此时即可使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="external"><code>http://localhost:4000</code></a>，检查站点是否正确运行。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-16-111534.jpg" alt=""></p>
<h2 id="一些说明文档上没有说的事儿"><a href="#一些说明文档上没有说的事儿" class="headerlink" title="一些说明文档上没有说的事儿"></a>一些说明文档上没有说的事儿</h2><p>估计你马上就会发现上面一节的内容和 <code>NexT</code> 官网上的内容一模一样，没错，确实是从官方文档上面 <code>copy</code> 过来的，因为官方文档已经把大多数问题都说清楚了，所以我就不把说明文档里的内容再重复一遍了，让我们说点文档里面没提到的吧。</p>
<h3 id="创建-about-界面"><a href="#创建-about-界面" class="headerlink" title="创建 about 界面"></a>创建 about 界面</h3><p>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page about</div></pre></td></tr></table></figure>
<p>在主题的 <code>_configy.yml</code> 设置中将 <code>menu</code> 中 <code>about</code> 前面的注释去掉即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  about: /about</div></pre></td></tr></table></figure>
<p>需要注意的是，在 <code>about</code> 的页面中，<code>title</code> 是不会自动对齐的，如果想达到对齐的方式可以直接把 <code>title</code> 放到正文中，然后用 <code>hexo</code> 的居中对齐标签来实现该效果。</p>
<p>还有就是记得在这个 <code>md</code> 文件的 <code>front-matter</code> 里加入 <code>comments: false</code> 的语句，否则<code>about</code> 页面里面还会出现评论组件，如果你没有在博客系统里面添加过评论组件或者本意就想显示评论组件，这一条可以忽略。</p>
<h3 id="博客-favicon-图标"><a href="#博客-favicon-图标" class="headerlink" title="博客 favicon 图标"></a>博客 favicon 图标</h3><p>先说说什么是 <code>favicon</code> 图标，看到下图左边蓝色的 <code>logo</code> 了么，它就是 <code>favicon</code> 图标。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-20-102043.jpg" alt=""></p>
<p>制作这个东西很简单，将你喜欢的图片放到 <a href="http://realfavicongenerator.net/" target="_blank" rel="external">RealFaviconGenerator</a> 网站中进行转换，然后把获得的 <code>ico</code> 文件放到 <code>source</code> 文件夹中</p>
<p>最后在主题配置文件 <code>_config.yml</code> 中的 <code>favicon</code> 字段里填写 <code>ico</code> 图片的地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">favicon: /YourIcoPath</div></pre></td></tr></table></figure>
<p>好了，重新部署一下你的网站就可以看到自己的 <code>favicon</code> 了！</p>
<p>如果没有看到，请不要着急，等上一会再看看，如果还是不行的话，请查看一下图片的路径和文件的格式是否有误。</p>
<h3 id="sitemap-设置和蜘蛛协议"><a href="#sitemap-设置和蜘蛛协议" class="headerlink" title="sitemap 设置和蜘蛛协议"></a>sitemap 设置和蜘蛛协议</h3><p>在开始之前，还是先说说 <code>sitemap</code> 是什么东西。</p>
<p>你可以把 <code>sitemap</code> 当做一个网站的说明书，它用于告诉搜索引擎这个网站里面有什么内容，以便用户在使用搜索引擎的时候，更容易找到这个网站的相关资源。</p>
<p>所以说做这件事的目的就是为了让他人能够更好的找到你博客里的内容，如果你并不希望他人找到的话，那么你完全可以忽略这节的内容。</p>
<p>下面我会具体演示一遍向 Google 添加 <code>sitemap</code> 的过程，走起！</p>
<ol>
<li>向 Google 证明你对自己博客的所有权，参考 <code>NexT</code> 文档中的 <a href="https://theme-next.iissnan.com/third-party-services.html#google-webmaster-tools" target="_blank" rel="external"><code>Google Webmaster tools</code></a> 一节完成对博客的验证。</li>
<li>在站点根目录下安装插件 <a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external"><code>hexo-generator-sitemap</code></a></li>
<li><p>在站点配置文件 <code>_config.yml</code> 中加入以下字段</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sitemap:</div><div class="line">    path: sitemap.xml</div><div class="line">    template: ./sitemap_template.xml</div></pre></td></tr></table></figure>
</li>
<li><p>重新生成博客文件，并确认 <code>public</code> 文件夹下是否多出一个 <code>sitemap.xml</code> 文件</p>
</li>
<li><p>在 Google 的 <code>Search Console</code> 里填写 <code>sitemap</code> 地址，看看是否检测成功</p>
<p> <img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-20-114421.jpg" alt=""></p>
</li>
<li><p>大概过几分钟，在 <code>Google</code> 的搜索栏里输入 <code>site:YourDomain</code>,例如我的就是<code>site:sketchk.xyz</code>, 如果能够像下图一样展示出你的网站，那么就说明你的网站已经被正确收录了。</p>
<p> <img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-20-114743.jpg" alt=""></p>
</li>
</ol>
<p>弄完了 <code>sitemap</code> 的设置，我们来说说蜘蛛协议。</p>
<p>蜘蛛协议就是和蜘蛛之间的约定，哈哈，是不是很想死，不过这里的蜘蛛并不是真正意义上的蜘蛛，而是存在于网络中的网络爬虫，通过这个协议来规定这些网络爬虫到底能访问哪些资源，不能访问哪些资源。如果你对我说的东西还是感觉太不理解，我们来看看更官方的一种解释？</p>
<blockquote>
<p>网络爬虫是一种按照一定的规则，自动地抓取网络信息的程序或者脚本。它是搜索引擎中最重要的一项技术，通过网络爬虫，我们可以将互联网中数以百亿计的网页信息保存到本地，形成一个镜像文件，为整个搜索引擎提供数据支撑。</p>
</blockquote>
<p>好了，知道蜘蛛协议是什么了，那我们赶紧操作起来吧！</p>
<ul>
<li>在站点根目录的 <code>source</code> 文件下新建 <code>robots.txt</code> 文件，添加以下文件内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># hexo robots.txt</div><div class="line">User-agent: *</div><div class="line">Allow: /</div><div class="line">Allow: /archives/</div><div class="line">Allow: /categories/</div><div class="line">Allow: /tags/</div><div class="line">Allow: /about/</div><div class="line"></div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /js/</div><div class="line">Disallow: /css/</div><div class="line">Disallow: /fonts/</div><div class="line">Disallow: /vendors/</div><div class="line">Disallow: /fancybox/</div><div class="line"></div><div class="line">Sitemap: http://www.sketchk.xyz/sitemap.xml</div></pre></td></tr></table></figure>
<ul>
<li>在 <code>Google Search Console</code> 的 <code>robots.txt</code> 中测试你的协议是否被正确识别！</li>
</ul>
<p>好了，补充的内容就到这了，加上 <code>Next</code> 官网上的说明文档，我相信这个博客的功能已经基本够用了。</p>
<p>如果你想试试别的主题也未尝不可，生活嘛，就要多折腾才有意思！</p>
<p>下一章我们来说说自动部署的话题吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;估计你早就对当前这个博客的样式感到不满了，所以这一章我们来讨论下 Hexo 主题并亲手配置一下它吧！&lt;/p&gt;
    
    </summary>
    
      <category term="DIY" scheme="http://sketchk.xyz/categories/DIY/"/>
    
      <category term="Blog" scheme="http://sketchk.xyz/categories/DIY/Blog/"/>
    
    
      <category term="Blog" scheme="http://sketchk.xyz/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://sketchk.xyz/tags/Hexo/"/>
    
      <category term="Next" scheme="http://sketchk.xyz/tags/Next/"/>
    
      <category term="Travis CI" scheme="http://sketchk.xyz/tags/Travis-CI/"/>
    
      <category term="Domain" scheme="http://sketchk.xyz/tags/Domain/"/>
    
      <category term="GitHub Pages" scheme="http://sketchk.xyz/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>A Guide Of Making Your Personal Blog - Part 4</title>
    <link href="http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-4/"/>
    <id>http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-4/</id>
    <published>2017-03-24T15:42:23.000Z</published>
    <updated>2017-03-26T13:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要讨论了博客框架的话题。目前主流的博客框架有 <code>Jeklly</code>, <code>Octopreess</code> 和 <code>Hexo</code>。</p>
<p>选 <code>Hexo</code> 的因为它方便实用，至于我是怎么知道的，其实很简单，因为三种方式都试过。</p>
<a id="more"></a>
<h2 id="博客框架"><a href="#博客框架" class="headerlink" title="博客框架"></a>博客框架</h2><p>我们在前面说过 <code>GitHub Pages</code> 服务允许我们访问已经写好的 <code>HTML</code> 等静态文件，所以我们对博客框架的需求就是产出静态文件。</p>
<p>幸运的是能完成这个需求的框架有很多，例如 <code>GitHub Pages</code> 官方推荐的 <a href="https://jekyllrb.com/" target="_blank" rel="external"><code>Jeklly</code></a>, 也有基于 <code>Jeklly</code> 开发的 <a href="http://octopress.org/" target="_blank" rel="external"><code>Octopreess</code></a>, 不过我今天要说的是另外一个博客框架：<a href="https://hexo.io/zh-cn/" target="_blank" rel="external"><code>Hexo</code></a>。</p>
<p>所以废话少说，直接来看看 <code>Hexo</code> 吧。</p>
<h2 id="安装-Hexo-的前提"><a href="#安装-Hexo-的前提" class="headerlink" title="安装 Hexo 的前提"></a>安装 Hexo 的前提</h2><p>安装 <code>Hexo</code> 需要电脑里面安装 <code>Node.js</code> 和 <code>Git</code>。</p>
<p><code>Git</code> 我们已经在前面安装过了，所以现在我们只需要安装 <code>Node.js</code> 了，具体怎么安装就不废话了，就列出官网链接吧：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p>
<p>如果你不知道自己是否安装了，在终端里面输入 <code>$ node --version</code> 来检查就好。 </p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，在终端下面输入以下命令来安装 <code>Hexo</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h2 id="创建我们的博客吧！"><a href="#创建我们的博客吧！" class="headerlink" title="创建我们的博客吧！"></a>创建我们的博客吧！</h2><p>安装 <code>Hexo</code> 完成后，请执行下列命令，<code>Hex</code>o 将会在指定文件夹中新建所需要的文件，下面的代码中 <code>&lt;folder&gt;</code> 指的是文件夹的地址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install</div><div class="line">新建完成后，指定文件夹的目录如下：</div></pre></td></tr></table></figure>
<blockquote>
<p>在之后的文章里，<code>&lt;folder&gt;</code> 文件夹会统一称为<strong>站点根目录</strong></p>
</blockquote>
<p>创建完毕后，你大概会看到这样一个目录结构。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-101403.jpg" alt=""></p>
<blockquote>
<p>实际生成的目录结构和 Hexo 官网给出的目录结果会有一些出入，不过估计是作者许久没有更新了，总之按照操作来就好。</p>
</blockquote>
<h3 id="预览我们的博客"><a href="#预览我们的博客" class="headerlink" title="预览我们的博客"></a>预览我们的博客</h3><p>在站点根目录中，输入<code>$ hexo server</code> 后会出现如下的提示</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-105131.jpg" alt=""></p>
<p>所以让我们在浏览器里面输入一下 <code>http://localhost:4000/</code> 吧，然后你看到了什么？</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-105420.jpg" alt=""></p>
<p>以后我们在实际的使用过程中，每当修改完网站里的东西就可以通过这种方式来预览，而不是直接发布到网上。</p>
<h3 id="生成静态网站"><a href="#生成静态网站" class="headerlink" title="生成静态网站"></a>生成静态网站</h3><p>好了,假设你已经修改好了网站，我们现在就要生成静态文件了，我们应该怎么做呢？</p>
<p>我们只需要在站点根目录中输入 <code>$ hexo generate</code> 即可，执行完以后大概是下图这个样子。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-111314.jpg" alt=""></p>
<p>此时，你会发现站点根目录里多了一个 <code>public</code> 文件夹，这个文件夹里的东西就是博客的静态文件，所以下一步，不用我说，你也应该知道我们要干什么了吧？</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-111510.jpg" alt=""></p>
<h3 id="部署我们的博客"><a href="#部署我们的博客" class="headerlink" title="部署我们的博客"></a>部署我们的博客</h3><p>你是不是想起来我们要干什么了啊？ 如果忘记的话，也没事，我再重说一遍就好：</p>
<p><strong>那就是把刚才生成的静态文件上传到 GitHub 仓库中。</strong></p>
<p>如果你对 <code>Git</code> 的使用比较熟练，你完全可以通过 <code>Git</code> 把这些本地文件 push 到对应的仓库中。</p>
<p>如果你对 <code>Git</code> 并不熟悉，那该怎么办呢？ </p>
<p>还好 <code>Hexo</code> 给我们提供了另一种选择，通过它我们可以很方便的把静态文件部署到对应的仓库中，不过在使用这个功能前，我们需要做一点设置。</p>
<ul>
<li>首先，打卡站点根目录中的 <code>_config.yml</code> 文件，找到 <code>Deployment</code> 字段，填写下面的内容，</li>
</ul>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<ul>
<li>然后，在终端里安装一个用于帮助我们上传文件的扩展工具：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<ul>
<li>最后，在站点根目录中输入 <code>$ hexo deploy</code></li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-113301.jpg" alt=""></p>
<blockquote>
<p>眼尖的朋友一定发现，我在终端里面实际输入的是 <code>hexo d</code> 而不是 <code>hexo deploy</code>, 这是因为 <code>Hexo</code> 对这些命令做了优化，大部分命令我们都可以使用简写的方式来执行，例如 <code>hexo g</code> 完全等同与 <code>hexo generate</code>，是不是对 <code>Hexo</code> 又产生了一点好感呢？</p>
</blockquote>
<p>现在在你的浏览器里面输入自己购买的域名吧！What !? 为什么是 404 页面。</p>
<p>其实道理很简单，打开你的 <code>GitHub</code> 仓库，发现有什么不对的地方么？ </p>
<p>你会发现库里面原有的 <code>CNAME</code> 文件没了，这也就是说 <code>Settings</code> 里面的 <code>Custom Domain</code> 没了，所以就会 404 喽。</p>
<p>是不是知道原理以后，出现这些问题也不会怕怕了，现在我们赶紧填写好 <code>Custom Domain</code> 吧，然后再次在浏览器里输入购买的域名！ 嘿嘿嘿！</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-114615.jpg" alt=""></p>
<p>恭喜你！你的个人博客终于有个雏形了！</p>
<h2 id="改进一下"><a href="#改进一下" class="headerlink" title="改进一下"></a>改进一下</h2><h3 id="每次都要填写-Custom-Domain-参数？"><a href="#每次都要填写-Custom-Domain-参数？" class="headerlink" title="每次都要填写 Custom Domain 参数？"></a>每次都要填写 Custom Domain 参数？</h3><p>我想聪明的你马上会发现一个问题，似乎我们每次 <code>hexo deploy</code> 后，都要去修改 <code>Custom Domain</code> 这个参数，是不是感觉心好累 ?</p>
<p>解决这个问题并不难，我们只需要在 <code>source</code> 文件夹下面创建一个名为 <code>CNAME</code> 的文件，然后在这个文件里写上我们购买的域名就可以了。</p>
<p>为什么呢？因为 <code>Hexo</code> 的工作原理是将 <code>source</code> ，<code>theme</code> 等文件夹里的内容进行一顿处理，就变成 <code>public</code> 文件夹里的内容，如果我们在 <code>source</code> 里面放入了一个它无法处理的文件，Hexo 就会原封不动的把它拷贝到 <code>public</code> 文件夹中，这样也就解决了我们每次要修改 <code>Custom Domain</code> 的问题。</p>
<blockquote>
<p>如果你不明白为什么加了一个 <code>CNAME</code> 文件就等于修改了 <code>Custom Domain</code>，请再阅读上一篇文章里 <code>解释下在 GitHub 里的操作</code> 一节的内容</p>
</blockquote>
<h3 id="hexo-deploy-不好使了？"><a href="#hexo-deploy-不好使了？" class="headerlink" title="hexo deploy 不好使了？"></a>hexo deploy 不好使了？</h3><p>有时候你会发现 <code>hexo deploy</code> 不好使了。我该怎么办？很简单，老老实实的用 <code>Git</code> 吧! </p>
<p>什么，还要我教一下 <code>Git</code> 的使用，我建议你还是看看<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰老师的 git 教程</a>。</p>
<p>如果你对每次敲击这些无聊且重复的 <code>Git</code> 代码感到厌烦，那我们来说说如何用一个脚本替我们完成这些工作吧!</p>
<p>Talk is cheap , Show me the code!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="comment">#!/bin/sh</span></div><div class="line">$ [ <span class="_">-d</span> .deploy/&lt;Name&gt;.github.io ] &amp;&amp; rm -rf .deploy/&lt;Name&gt;.github.io</div><div class="line">$ git <span class="built_in">clone</span> git://github.com/&lt;Name&gt;/&lt;Name&gt;.github.io.git .deploy/&lt;Name&gt;.github.io</div><div class="line">$ hexo generate</div><div class="line">$ cp -R public/* .deploy/&lt;Name&gt;.github.io </div><div class="line">$ <span class="built_in">cd</span> .deploy/&lt;Name&gt;.github.io </div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"update"</span></div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>需要说明的是，你要把 <code>&lt;Name&gt;</code> 换成你的 <code>GitHub</code> 账户名，然后把它保存为 <code>deploy.sh</code> 并放到你的站点根目录下。</p>
<p>有了它，我们只需要每次在终端里面输入 <code>sh deploy.sh</code> 即可以完成部署了，是不是很完美，让我们看一下它的实际运行效果。</p>
<blockquote>
<p>不用纠结你终端里面展示的内容和我的不太一样，重要的是最后的那句 <strong>Everything up-to-date</strong>。</p>
</blockquote>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-09-060814.jpg" alt=""></p>
<p>我说过凡事还是要搞明白，要不以后出问题都不知道该怎么办，所以各位还是耐着性子让我把这段 <code>shell</code> 脚本解释下。</p>
<ul>
<li>第一行是对 shell 的声明，说明你所用的是哪种类型的 <code>shell</code> 及其路径所在。</li>
<li>第二行里 <code>&amp;&amp;</code> 左边是在判断是否有 <code>.deploy/&lt;Name&gt;.github.io</code> 文件夹，<code>&amp;&amp;</code> 右边是在说删除 <code>.deploy/&lt;Name&gt;.github.io</code> 文件夹，所以这行的意思就是如果有这个文件夹，就删掉它</li>
<li>第三行的意思是把你 <code>&lt;Name&gt;.github.io</code> 仓库的文件拷贝到本地的 <code>.deploy/&lt;Name&gt;.github.io</code> 文件夹下面</li>
<li>第四行就是让 <code>hexo</code> 生成静态文件</li>
<li>第五行就是说把 <code>public</code> 文件夹下面的东西放到 <code>.deploy/&lt;Name&gt;.github.io</code></li>
<li>第六行就是跳转到 <code>.deploy/&lt;Name&gt;.github.io</code> 目录下</li>
<li>第七，八，九行就是正常的 <code>git</code> 操作了。</li>
</ul>
<p>所以现在你明白了每一步的作用，如果在使用过程中出现了问题就不必慌张了。</p>
<p>好了，这两个头疼的问题终于解决了！让我们继续下面的内容。</p>
<h2 id="发布一篇新文章"><a href="#发布一篇新文章" class="headerlink" title="发布一篇新文章"></a>发布一篇新文章</h2><p>现在是不是迫不及待的想发布一篇博客了？</p>
<p>你只需要输入 <code>hexo new &lt;名称&gt;</code>， 然后你会发现在 <code>source/_post/</code> 里多一个文件，文件名与你输入的 <code>&lt;名称&gt;</code> 相同。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-09-075224.jpg" alt=""></p>
<p>不过，你很快会发现这是一个以 <code>md</code> 为后缀名的文件，这说明它是一个支持 <code>Markdown</code> 语言的文件，那么什么是 <code>Markdown</code> 呢？</p>
<blockquote>
<p><code>Markdown</code> 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，<code>Markdown</code> 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 <code>HTML</code> 标记语言来说，<code>Markdown</code> 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>
</blockquote>
<p>所以你大概已经明白了，<code>MarkDown</code> 是一种用于写作的语言，你如果想使用目前的这套技术方案来搭建自己的博客，就必须使用这个语言，其实说真的，这个没啥难度，可以参考下面的几个资料学习下：</p>
<ul>
<li><code>Markdown</code> 发明者写的说明文档：<a href="">http://daringfireball.net/projects/markdown/syntax</a></li>
<li>热心群众翻译的中文版：<a href="">https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md</a></li>
<li><code>GitHub</code> 提供的 <code>Markdown</code> 游戏，边学边玩：<a href="">http://www.markdowntutorial.com/</a></li>
<li><code>Markdown</code> 语法的 <code>cheatsheet</code>: <a href="">https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf</a></li>
</ul>
<p>至于用什么来编辑 <code>md</code> 文件，我自己是目前是在用 <a href="https://macdown.uranusjr.com/" target="_blank" rel="external"><code>MacDown</code></a>，受限于 <code>MacDown</code> 的归纳能力，我目前在观望 <a href="http://happenapps.com/#quiver" target="_blank" rel="external"><code>Quiver</code></a>和 <a href="http://zh.mweb.im/" target="_blank" rel="external"><code>MWeb</code></a>。</p>
<p>总之，这些都不重要，哪个看着顺眼就用哪个！</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-09-markdown-syntax-language.png" alt=""></p>
<h3 id="关于创建文章的一点补充"><a href="#关于创建文章的一点补充" class="headerlink" title="关于创建文章的一点补充"></a>关于创建文章的一点补充</h3><p>如果仔细看 <code>Hexo</code> 的文档，我们就会知道创建文章的完整命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>我想跟大家说的有两点：</p>
<ul>
<li><p>第一点，就是 <code>title</code> 参数为什么我会用 <code>“ ”</code> 号包起来，因为不用这个双引号包起来的话，我们文章的标题如果有空格的话，就会出问题了，用这种方式的话，即使你再双引号里面有空格，<code>Hexo</code> 在实际生成文件名的时候也会用 <code>-</code> 来替代它，所以这只是一个避免错误的小技巧而已。</p>
</li>
<li><p>第二点，就是 <code>Hexo</code> 支持模板这个概念，对应到这个命令里面就是的 <code>layout</code> 参数，对应到我们的文件里就是指 <code>scaffolds</code> 文件夹，那么这个概念是什么意思呢，也就是说我们不同的文章会有一些固定的格式，我们可以为这一类固定格式的文章建立通用的模板，这样我们就不用在每次创建文章的时候输入相同的内容。关于这个话题的一些高级使用技巧我就不在这里展示了，你完全可以直接查看 <code>Hexo</code> 的官方文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">https://hexo.io/zh-cn/docs/</a></p>
</li>
</ul>
<p>现在你已经搭建好了博客，也知道如何简单的使用这个博客系统了，那么这一篇的内容也就到此结束了。</p>
<p>下一篇我们会来讨论一下如何让我们的博客看起来更漂亮点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要讨论了博客框架的话题。目前主流的博客框架有 &lt;code&gt;Jeklly&lt;/code&gt;, &lt;code&gt;Octopreess&lt;/code&gt; 和 &lt;code&gt;Hexo&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;选 &lt;code&gt;Hexo&lt;/code&gt; 的因为它方便实用，至于我是怎么知道的，其实很简单，因为三种方式都试过。&lt;/p&gt;
    
    </summary>
    
      <category term="DIY" scheme="http://sketchk.xyz/categories/DIY/"/>
    
      <category term="Blog" scheme="http://sketchk.xyz/categories/DIY/Blog/"/>
    
    
      <category term="Blog" scheme="http://sketchk.xyz/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://sketchk.xyz/tags/Hexo/"/>
    
      <category term="Next" scheme="http://sketchk.xyz/tags/Next/"/>
    
      <category term="Travis CI" scheme="http://sketchk.xyz/tags/Travis-CI/"/>
    
      <category term="Domain" scheme="http://sketchk.xyz/tags/Domain/"/>
    
      <category term="GitHub Pages" scheme="http://sketchk.xyz/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>A Guide Of Making Your Personal Blog - Part 3</title>
    <link href="http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-3/"/>
    <id>http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-3/</id>
    <published>2017-03-24T15:42:18.000Z</published>
    <updated>2017-03-26T13:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在这篇文章里我们会说说域名解析的话题。不过这次我们会先进行具体的操作，再解释这些操作背后的含义。</p>
<a id="more"></a>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>估计你已经十分讨厌我每次在开干前的废话，所以我决定这次咱们先开干！走起</p>
<h3 id="在-DNSPods上进行操作"><a href="#在-DNSPods上进行操作" class="headerlink" title="在 DNSPods上进行操作"></a>在 DNSPods上进行操作</h3><ul>
<li>登录 <code>DNSPods</code> 官网： <a href="https://www.dnspod.cn/" target="_blank" rel="external">https://www.dnspod.cn/</a></li>
<li>注册 <code>DNSPods</code> 账户，这一步咱就不废话了</li>
<li>注册成功后，用用户名登录，点击左边的“域名解析”, 然后点击“添加域名”, 点击域名添加以下两个记录. 另外 <code>name.github.io</code> 中的 <code>name</code> 是你 <code>GitHub</code> 的用户名。</li>
</ul>
<table>
<thead>
<tr>
<th>主机记录</th>
<th>记录类型</th>
<th>线路类型</th>
<th>记录值</th>
<th>MX优先级</th>
<th>TTL</th>
</tr>
</thead>
<tbody>
<tr>
<td>@</td>
<td>CNAME</td>
<td>默认</td>
<td>name.github.io.</td>
<td>无输入值</td>
<td>10</td>
</tr>
<tr>
<td>www</td>
<td>CNAME</td>
<td>默认</td>
<td>name.github.io.</td>
<td>无输入值</td>
<td>10</td>
</tr>
</tbody>
</table>
<h3 id="在-GoDaddy-上进行操作"><a href="#在-GoDaddy-上进行操作" class="headerlink" title="在 GoDaddy 上进行操作"></a>在 GoDaddy 上进行操作</h3><ul>
<li>登录 <code>GoDaddy</code> 的账户，点击自己账户里的 <code>My Products</code> 选项。</li>
<li>在弹出的界面里面选择 <code>Domains</code> 一行的 <code>Manage</code> 按钮</li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-Jietu20170306-155949.jpg" alt=""></p>
<ul>
<li>点击左边卡片中右上角的齿轮按钮，然后再点击 <code>Manage DNS</code> 按钮</li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-080220.jpg" alt=""></p>
<ul>
<li>在 <code>Nameservers</code> 卡片中修改 <code>NameServe</code> 为 <code>f1g1ns1.dnspod.net</code>, <code>f1g1ns2.dnspod.net</code></li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-080419.jpg" alt=""></p>
<h3 id="在-GitHub-上进行操作"><a href="#在-GitHub-上进行操作" class="headerlink" title="在 GitHub 上进行操作"></a>在 GitHub 上进行操作</h3><ul>
<li>打开我们在 <code>GitHub</code> 上的仓库，点击 <code>Settings</code> 按钮</li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-043736.jpg" alt=""></p>
<ul>
<li>在 <code>GitHub Pages</code> 的选项卡中的 <code>Custom domain</code> 中填写你自己购买的域名</li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-043807.jpg" alt=""></p>
<h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p>好了，现在所有的操作都做完了，在浏览器里输入一下你自己购买的域名吧，那个熟悉的页面又出现了，只是这次的网址变成了你之前购买的域名。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-083908.jpg" alt=""></p>
<h2 id="我们都干了些什么？"><a href="#我们都干了些什么？" class="headerlink" title="我们都干了些什么？"></a>我们都干了些什么？</h2><p>不过，你明白刚才做的这些事情都代表什么意思么？如果出了问题应该去寻找那方面的资料呢？是不是感觉有点不知所措。所以我们还是静下心来看看我们这些操作到底都代表着什么意思。</p>
<h3 id="解释下在-DNSPods-里的操作"><a href="#解释下在-DNSPods-里的操作" class="headerlink" title="解释下在 DNSPods 里的操作"></a>解释下在 DNSPods 里的操作</h3><p>首先，我们注册了一个 <code>DNSPods</code> 账号，并做了一些操作。</p>
<p>在解释这些操作之前，我们得先说明一下 <code>DNS</code> 和 <code>DNSPods</code>。</p>
<p><code>DNS</code> 的全称是 <code>Domain Name System</code>，所以通过字面就可以理解出它其实是一个域名解析系统，用于解析域名对应的服务器。</p>
<p><code>DNSPods</code> 是一个提供 <code>DNS</code> 服务的公司。当然还有其他提供 <code>DNS</code> 服务的公司，如果你想用别的也完全 OK。</p>
<p>我们在 <code>DNSPods</code> 里面进行域名解析的时候到底又做了哪些工作呢？让我们重新看下刚才填写的表格：</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-Jietu20170306-184640.jpg" alt=""></p>
<p>这里面的名词包括，主机记录，记录类型，线路类型，记录值，权重，MX 优先级，TTL ，它们分别代表着什么意思呢，我们来一个个解释。</p>
<ul>
<li>主机记录用于设置域名的前缀，用于告诉 <code>DNS</code> 服务器把 “域名前缀 + 域名” 的链接与记录值中的地址关联到一起，例如我们在主机记录里输入 <code>www</code> ，记录值里输入 <code>baidu.com</code> ，就代表我们把 <code>www.sketchk.xyz</code> 与 <code>www.baidu.com</code> 关联到一起。当然不同的前缀有不同的意思，常见的有：<ul>
<li><code>www</code>：表示解析域名 <code>www.skethck.xyz</code> </li>
<li><code>@</code>：表示解析主域名 <code>sketchk.xyz</code></li>
</ul>
</li>
</ul>
<ul>
<li>记录值是用来填完我们购买的域名地址或者服务器的 <code>IP</code> 地址。<ul>
<li>如果我们在记录类型里选择了 <code>A</code> 记录就在记录值里填写服务器的 <code>IP</code>。</li>
<li>如果我们在记录类型里选择了 <code>CNAME</code> 记录就在记录值里填写我们购买的域名。</li>
</ul>
</li>
</ul>
<ul>
<li><p>记录类型是用于区分记录值的类型，不同的记录类型要填写不同样式的记录值</p>
</li>
<li><p>线路类型是说我们让哪些线路的用户可以访问这个域名。举个例子，如果我们指定了电信用户，那么联通用户就无法访问我们这个域名，通常我们选默认就好。</p>
</li>
<li><p>TTL 是 Time To Live 的缩写，它表示一条域名解析记录在 <code>DNS</code> 服务器中的存留时间，单位是秒，所以 600 是表示 10 分钟的意思。</p>
</li>
<li><p>权重和 MX 优先级 跟我们做博客这件事没有太大关系，就不废话了</p>
</li>
</ul>
<p>在这里估计有人会问，我们使用的是 <code>GitHub Pages</code> 服务，并没有实际去购买一个服务器，那么我们怎么去获得这个 <code>IP</code> 地址呢？ 其实在 <code>GitHub</code> 的官网上就有解释，具体详情请点击<a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="external">这里</a>。</p>
<p>如果你仔细读了 <code>Customizing GitHub Pages</code> 的这篇<a href="https://help.github.com/articles/about-supported-custom-domains/" target="_blank" rel="external">文档</a>，就会发现 <code>GitHub</code> 推荐在 <code>DNS</code> 里面使用 <code>A</code> 记录和 <code>CNAME</code> 结合的方式解析，而我在之前使用的是 <code>CNAME</code> 记录的方式，那么我们就改一下吧。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-07-124910.jpg" alt=""></p>
<h3 id="解释下在-GoDaddy-里的操作"><a href="#解释下在-GoDaddy-里的操作" class="headerlink" title="解释下在 GoDaddy 里的操作"></a>解释下在 GoDaddy 里的操作</h3><p>现在把我们在 <code>DNSPods</code> 里面干的事情算是搞明白了，我们是告诉了 <code>DNS</code> 服务器应该如何解析我们购买的域名，那么下一步就是告诉我们的域名在解析的时候去找刚才配置过的 <code>DNS</code> 服务器。</p>
<p>好了，让我们回顾下刚才填写的内容。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-080419.jpg" alt=""></p>
<p>估计有些好奇的小伙伴一定会好奇，为什么我们要填写 <code>f1g1ns1.dnspod.net</code>, <code>f1g1ns2.dnspod.net</code>，而不是其他的值，原因很简单，<code>DNSPods</code> 在它的使用手册里面说明了它们的地址就是这样的。如果有任何疑问可以看它们提供的<a href="https://support.dnspod.cn/Kb/showarticle/tsid/42/" target="_blank" rel="external">帮助文档</a>。</p>
<p>所以如果你没有使用 <code>DNSPods</code> 作为你的 <code>DNS</code> 服务商，只需要找到对应的地址并填写到 <code>Nameservers</code> 里面即可。</p>
<h3 id="解释下在-GitHub-里的操作"><a href="#解释下在-GitHub-里的操作" class="headerlink" title="解释下在 GitHub 里的操作"></a>解释下在 GitHub 里的操作</h3><p>回顾下我们前面做的事，我们在 <code>DNSPods</code> 里面给出了域名和服务器的映射关系，然后我们告诉了域名商在解析时候去 <code>DNSPods</code> 里进行解析，这样它们就可以找到对应的服务器 <code>IP</code> 地址了，用一个流程图来表示的话，就是下面的样子：</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-052804.jpg" alt=""></p>
<blockquote>
<p>如果你对上面这幅图有疑问，可以在终端里面输入 <code>dig sketchk.xyz</code> ，<code>dig www.sketchk.xyz</code>，<code>dig github.sketchk.io</code> 来查看具体信息</p>
</blockquote>
<p>这一切看起来都能解释清楚，但我们想想 <code>Github</code> 的服务器上不光有 <code>sketchk.github.io</code> 的仓库，也可能有 <code>abc.github.io</code> 的仓库, 还会有 Pop , AsyncDisplayKit 等一堆第三方仓库，那当我们通过自定义域名（例如 <code>sketchk.xyz</code>）找到这台服务器的时候，服务器是怎么把正确的资源返回给我们的呢？</p>
<p>如果你不太明白我在说什么的话，请回顾 <code>在 GitHub 上进行操作</code> 一节的内容并删除 <code>Custom Domain</code> 中的内容，然后你再访问下自己购买的域名？ 是不是 404 了！ 但如果你访问 <code>GitHub</code> 自动分配的那个域名（例如给我分配的 <code>sketchk.github.io</code>），你会发现一切正常。是不是很有意思？</p>
<p>所以我们需要确定一个 <code>GitHub</code> 和 自定义域名的对应关系，这样当你访问 <code>GitHub</code> 的服务器的时候，<code>GitHub</code> 就知道应该返回给你什么样子的资源了。</p>
<p>心细的朋友可能会问，这个对应关系到底是怎么进行的呢？ 我自己做了一个实验，将 <code>Custom Domain</code> 改为了 <code>sketchktestforfun.xyz</code>, 此时无论你访问 <code>sketchktestforfun.xyz</code> 还是 <code>sketchk.xyz</code> 都会发现网站无法正常展示。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-072213.jpg" alt=""></p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-Jietu20170308-152333.jpg" alt=""></p>
<p>不过我们可以尝试用下面的方式来访问域名，比如把请求的 <code>Host</code> 改为 <code>sketchktestforfun.xyz</code> </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -v sketchk.xyz -H <span class="string">'Host: sketchktestforfun.xyz'</span></div></pre></td></tr></table></figure>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-08-072514.jpg" alt=""></p>
<p>通过上面这个图，我们发现使用 <code>sketchk.xyz</code> 这个域名又可以访问到 <code>sketchk.github.io</code> 的资源了，这说明如果一个域名最终指向 <code>GitHub</code> 的服务器，当我们修改其 Host 为自己的仓库名时，它们最终都会访问到我们自己的那个仓库，这也又一次证明了在 <code>Custom Domain</code> 中填写的内容是为了让服务器知道如何响应不同的网络请求。</p>
<p>估计这时候一些朋友会惊慌失措的说道：“如果我在 <code>Custom Domain</code> 里填写的域名跟人重复了的话，该怎么办？” </p>
<p>对于这个问题，我们必须先搞清楚一件事，就是你在购买域名的时候，域名商一定不会卖给你一个已经被人买走的域名，Don’t panic！</p>
<p>这里还有一些朋友会说我在一些文章里面看到的操作不是这样的，他们都是在对应的仓库里面添加了一个 <code>CNAME</code> 文件并在里面写上自己购买的域名。</p>
<p>其实吧，这两种做法是一样的，只不过 <code>GitHub</code> 以前没有提供这样一个简便的操作，所以之前的人会用创建 <code>CNAME</code> 的方式完成这个对应关系，但现在 <code>GitHub</code> 提供了这个功能，咱就怎么简单怎么来吧！</p>
<p>好了，终于把这一章的内容写完了，让我们休息一下，开始下一章的内容吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这篇文章里我们会说说域名解析的话题。不过这次我们会先进行具体的操作，再解释这些操作背后的含义。&lt;/p&gt;
    
    </summary>
    
      <category term="DIY" scheme="http://sketchk.xyz/categories/DIY/"/>
    
      <category term="Blog" scheme="http://sketchk.xyz/categories/DIY/Blog/"/>
    
    
      <category term="Blog" scheme="http://sketchk.xyz/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://sketchk.xyz/tags/Hexo/"/>
    
      <category term="Next" scheme="http://sketchk.xyz/tags/Next/"/>
    
      <category term="Travis CI" scheme="http://sketchk.xyz/tags/Travis-CI/"/>
    
      <category term="Domain" scheme="http://sketchk.xyz/tags/Domain/"/>
    
      <category term="GitHub Pages" scheme="http://sketchk.xyz/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>A Guide Of Making Your Personal Blog - Part 2</title>
    <link href="http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-2/"/>
    <id>http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-2/</id>
    <published>2017-03-24T15:41:59.000Z</published>
    <updated>2017-03-26T13:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章会围绕域名和服务器的话题展开，同时也会说点关于 <code>Git</code> 的话题。</p>
<a id="more"></a>
<h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>搭建个人博客这件事，首先一定要弄个域名吧，要不然怎么彰显这是你的个人博客呢？</p>
<h3 id="在-GoDaddy-上购买域名"><a href="#在-GoDaddy-上购买域名" class="headerlink" title="在 GoDaddy 上购买域名"></a>在 GoDaddy 上购买域名</h3><p>购买域名的话，其实仁者见仁，智者见智，我个人是在 <a href="https://sg.godaddy.com/zh/" target="_blank" rel="external"><code>GoDaddy</code></a> 上买的, 当然，你要想在 <a href="https://wanwang.aliyun.com/" target="_blank" rel="external"><code>阿里云</code></a> 上买也 OK，毕竟条条大路通罗马，不过在这里我就以 <code>GoDaddy</code> 为例好了。</p>
<ol>
<li><p>注册并登录 <code>GoDaddy</code> 这种事我就不细说了！聪明的你一定可以完成的！</p>
</li>
<li><p>在搜索栏里寻找你感兴趣的域名，其实你随便输入一个字母就好，比如 <code>sketchk</code></p>
<p> <img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-03-2017-03-02-124814.jpg" alt=""></p>
</li>
<li><p>验证域名是否可用, 如果当前域名不可用会有提示，如果可用就会自动加到购物车</p>
<p> <img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-03-2017-03-02-125025.jpg" alt=""></p>
</li>
<li><p>选好以后点右上角的 <code>Continue to Cart</code> 按钮</p>
</li>
<li><p>稍等一会，你会进入到下面的页面，</p>
<p> <img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-03-2017-03-02-125800.jpg" alt=""></p>
<ul>
<li>第一个选项卡是在说，注册域名时，您的姓名、地址、电子邮件地址和电话号码都会自动发布到网上，大家都可以看见。借助 <code>GoDaddy</code> 隐私保护来保护自身免遭垃圾邮件和网络欺诈的侵害，它会将您的个人信息替换为 <code>GoDaddy</code> 的信息。</li>
<li>第二个选项卡是在说你是否愿意使用 <code>GoDaddy</code> 提供的搭建网站服务，也就是 <code>GoCentral</code> 服务。</li>
<li>第三个选项卡是说是否需要提供一个与你注册域名一致的邮箱地址。</li>
<li>这些都是附加服务，如果你感觉有必要就买好了，当然如果你觉得都没必要，也完全可以都不选。</li>
</ul>
</li>
</ol>
<ol>
<li><p>接下来就是填写一些个人信息了，这一步按照自己的情况填写就好。</p>
</li>
<li><p>最后就是付款了，记得在付款的时候去 <a href="http://www.dute.me/" target="_blank" rel="external"><code>独特优惠码</code></a> 上找点折扣，毕竟能省就省点呗。</p>
</li>
<li><p>付款结束后，你的注册邮箱会收到一封确认邮件，恭喜你，你现在拥有一个域名了！</p>
</li>
</ol>
<p>好了，做完这些就代表你已经处理完与域名相关的大部分事情了，剩下的一些事，我们会在 <code>域名解析</code> 一节里完成，下面我们来说说服务器！</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>在前一篇文章中，我们已经说了服务器像一个存放资源的地方，而存放资源的时候，你可以用一个小型仓库，也可以用一个中型仓库，甚至可以用一个大型仓库。那么我们应该选一个什么样的服务器呢？</p>
<h3 id="关于服务器的几件事"><a href="#关于服务器的几件事" class="headerlink" title="关于服务器的几件事"></a>关于服务器的几件事</h3><p>用于搭建网站的服务器大概有以下几种：虚拟主机，虚拟专享服务器以及专属服务器，它们之间的区别可以参考下图的说明：</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-071740.jpg" alt=""></p>
<p>像我们看到的大多数网站，其实都是“放”在服务器上的，然而，这个“放”其实并不像我们想的那么简单。</p>
<p>如果你不太理解的话，让我举个可能不是那么恰当的例子吧！</p>
<p>假如现在你已经拥有了一个域名并用 <code>HTML</code>，<code>CSS</code>，<code>JavaScript</code> 写好了一个堪称完美的网站，现在你把这些文件放在了某个服务器的磁盘中，那么你在另外一个电脑的浏览器里输入自己的域名会看到对应的网站么？</p>
<p>答案肯定是看不到的！</p>
<p>因为我们必须告诉服务器去监控各种各样的网络请求，让它能够对这些浏览器发送的网络请求进行分析，以便服务器能够知道这个请求到底想干嘛，然后再把这个请求想要的信息（例如 <code>HTML</code>，<code>CSS</code>，<code>JavaScript</code>）返回给对应的浏览器，这样你就能在浏览器上就能看到正确的内容了。</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-process.png" alt=""></p>
<blockquote>
<p>小白：额，什么是网络请求啊？<br>SketchK：当你在浏览器上输入一个域名并敲击了回车就完成了一次网络请求！</p>
</blockquote>
<p>所以说了这么多，你是不是突然意识到买服务器只是“服务器”这个 topic 里的一小部分。不过不要担心，因为我们还有更简单的办法，比如 <code>GitHub Pages</code>! </p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-072951.jpg" alt=""></p>
<p><code>Github Pages</code> 是 <code>GitHub</code> 公司提供的免费静态网站托管服务，所以从严格的角度上说，<code>GitHub Pages</code> 并不是一个服务器，它只是提供了一种类似服务器的服务！那么这个服务到底是什么呢？</p>
<p>简单来说就是：如果我们将写好的 <code>HTML</code> 等文件放到 <code>GitHub</code> 的指定位置时，<code>GitHub Pages</code> 就能对这些文件进行处理并把它们展示成一个网站，同时还会自动给这个网站提供一个特定的域名。假如我们对 <code>GitHub Pages</code> 提供的域名不喜欢，我们完全可以把域名改成我们自己想要的！</p>
<p>所以仔细理解下这个服务的内容，是不是很符合我们的需求! </p>
<ul>
<li>我们只需要将资源放到 <code>GitHub Pages</code> 要求的地方就等于拥有了一台服务器。</li>
<li>假如我们对 <code>GitHub Pages</code> 提供的域名不喜欢，我们还能把它换成在 <code>GoDaddy</code> 上买到的域名。</li>
</ul>
<p>好了，现在我们已经有解决方案了，那么我们将按照下面三个步骤来进行操作:</p>
<ol>
<li>安装 <code>Git</code></li>
<li>注册 <code>GitHub</code> 账户</li>
<li>开启 <code>GitHub Pages</code> 服务</li>
</ol>
<p>稍微等一下！<code>Git</code>, <code>GitHub</code>, <code>GitHub Pages</code> 这些都是神马东西！我已经完全不知所云了！Take it easy! 让我来简单的说明下吧：</p>
<ul>
<li><code>Git</code> 是一种软件，通过它可以控制代码的版本  </li>
<li><code>GitHub</code> 是一个代码的托管平台，支持 <code>Git</code> 作为其代码的版本控制软件  </li>
<li><code>GitHub Pages</code> 是…(我刚才不是说过了么，忘了就自己看看上面的解释吧)  </li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-Github2.png" alt=""></p>
<p>OK，废话就此结束了，准备实战！</p>
<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><blockquote>
<p>如果你已经安装过 <code>Git</code> 了，那就跳过这一节吧！</p>
</blockquote>
<ul>
<li>登录 <code>Git</code> 的官网：<a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a></li>
<li>点击右边的 <code>DownLoads For Mac</code> 按钮</li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-053621.jpg" alt=""></p>
<p>后面的事，咱就不用废话了。记住，安装完以后，在 terminal 上输入 <code>git --version</code> 来查看 Git 版本，只有安装成功才会显示出你的 Git 版本，所以你也可以通过这个方式来确认自己是否安装成功！</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-073045.jpg" alt=""></p>
<h3 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h3><blockquote>
<p>如果你已经注册过一个 <code>GitHub</code> 账户了，那就跳过这一节吧！</p>
</blockquote>
<ul>
<li>登录 <code>GitHub</code> 的官网：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></li>
</ul>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-064714.jpg" alt=""></p>
<ul>
<li>点击 <code>Sing Up</code> 进行注册，注册的过程就不细说了，你肯定能搞定的！</li>
<li>在注册邮箱里面查收激活邮件并激活 <code>GitHub</code> 账户。记住，一定要激活！否则后面无法使用 <code>GitHub Pages</code> 服务。 </li>
<li><p>设置 <code>Git</code> 的用户信息</p>
<ul>
<li><p>在命令行里输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your GitHub Name&quot;</div><div class="line">$ git config --global user.email &quot;Your-GitHub-Email-Address@example.com&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>配置 SSH Key</p>
<ul>
<li><p>创建 <code>SSH Key</code>。在用户主目录下，看看有没有 <code>.ssh</code> 目录，如果有，再看看这个目录下有没有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开终端，创建SSH Key：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"Your-GitHub-Email-Address@example.com"</span></div></pre></td></tr></table></figure>
</li>
<li><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p>
</li>
<li><p>如果一切顺利的话，可以在用户主目录里找到 <code>.ssh</code> 目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个就是 <code>SSH Key</code> 的秘钥对，<code>id_rsa</code> 是私钥，不能泄露出去，<code>id_rsa.pub</code> 是公钥，可以放心地告诉任何人。</p>
</li>
<li><p>登陆 <code>GitHub</code>，点击自己的头像，选择 <code>Settings</code>，再点击左边的 <code>SSH and GPG keys</code> 页面：</p>
</li>
<li><p>然后，点 <code>Add SSH Key</code>，填上任意 <code>Title</code>，在 <code>Key</code> 文本框里粘贴 <code>id_rsa.pub</code> 文件的内容：</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-063106.jpg" alt=""></p>
</li>
</ul>
</li>
<li><p>最后在终端里验证下是否配置成功</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T Your-GitHub-Email-Address@example.com</div></pre></td></tr></table></figure>
</li>
<li><p>如果在过程中遇到下面的提示, 不要紧张，输入 <code>yes</code> 就好。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="开启-GitHub-Pages-服务"><a href="#开启-GitHub-Pages-服务" class="headerlink" title="开启 GitHub Pages 服务"></a>开启 GitHub Pages 服务</h3><blockquote>
<p>温馨提醒：执行这一步时，一定要确保之前的配置都已经完成了哦！</p>
</blockquote>
<ul>
<li><p>创建仓库</p>
<ul>
<li><p>点击右上角的 <code>+</code> 号后，选择 <code>New rpoository</code>，会进入如下界面：</p>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-065819.jpg" alt=""></p>
</li>
<li><p>在 <code>Repository name</code> 下填写 <code>Your-GitHub-Name.github.io</code>，<code>Description</code> 下填写一些简单的描述，另外记得勾选下 <code>Initialize this repository with a README</code> 选项，</p>
</li>
</ul>
</li>
</ul>
<h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p>在执行完上面的步骤之后，我们可以在浏览器中输入 <code>https://Your-GitHub-Name.github.io/</code> 这个网址, 记住 <code>YourGitHubName</code> 代表你自己的 <code>GitHub</code> 用户名。</p>
<p>如果你能看到一个十分简陋的界面，就像下图所示一样,那么恭喜你。你已经成功开启了 <code>GitHub Pages</code> 服务啦。</p>
<blockquote>
<p>字号大的文字内容是仓库名称，字号小的是仓库信息。</p>
</blockquote>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-071136.jpg" alt=""></p>
<p>好了，关于域名和服务器的话题也算告一段落了。下一篇文章我们会说说博客框架的内容！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章会围绕域名和服务器的话题展开，同时也会说点关于 &lt;code&gt;Git&lt;/code&gt; 的话题。&lt;/p&gt;
    
    </summary>
    
      <category term="DIY" scheme="http://sketchk.xyz/categories/DIY/"/>
    
      <category term="Blog" scheme="http://sketchk.xyz/categories/DIY/Blog/"/>
    
    
      <category term="Blog" scheme="http://sketchk.xyz/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://sketchk.xyz/tags/Hexo/"/>
    
      <category term="Next" scheme="http://sketchk.xyz/tags/Next/"/>
    
      <category term="Travis CI" scheme="http://sketchk.xyz/tags/Travis-CI/"/>
    
      <category term="Domain" scheme="http://sketchk.xyz/tags/Domain/"/>
    
      <category term="GitHub Pages" scheme="http://sketchk.xyz/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>A Guide Of Making Your Personal Blog - Part 1</title>
    <link href="http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-1/"/>
    <id>http://sketchk.xyz/2017/03/24/A-Guide-Of-Making-Your-Personal-Blog-Part-1/</id>
    <published>2017-03-24T15:41:49.000Z</published>
    <updated>2017-03-26T13:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章先说说搭建个人博客中常见的基本概念吧。</p>
<a id="more"></a>
<p><img src="http://ocjyq2lpl.bkt.clouddn.com/2017-03-06-blogging-SMB.png" alt=""></p>
<h2 id="Before-All"><a href="#Before-All" class="headerlink" title="Before All"></a>Before All</h2><p>在搭建好这个博客之前，不是赶上工作比较忙碌，就是在实际操作中遇到了自己无法理解的问题，总之这件事就是一直没弄好。</p>
<p>说到这些无法理解的问题，就不得不说一下如果你用 Google 搜索关键字 - <code>使用 Hexo 搭建博客</code> ，还是能搜到很多不错的教程在说这件事，可是这些教程更像一些操作手册，只是机械的告诉你第一步该干嘛，第二步该干嘛，第三步该干嘛，也不会给你讲讲为什么要这么做。</p>
<p>对于我这种之前没有搭建网站经验的人来说，一旦文章里说的事模棱两可或者文章里提到的内容和实际操作有出入，比较简单的问题还能处理，比较复杂的就完全不知所措，只能自己一遍一遍的去摸索。</p>
<p>不过我觉得最可怕的不是弄错了，而是不知道哪里出错了，以及这些问题背后的含义。所以就有了这几篇文章。</p>
<h2 id="Core-Concept"><a href="#Core-Concept" class="headerlink" title="Core Concept"></a>Core Concept</h2><p>先说说搭建个人博客里面常会提到的三个词：域名， 服务器，博客系统</p>
<p>我去理解这些概念的时候，是给它们做了一个类比：好比你家楼下的小超市（一个已经搭建好的个人博客），我们把它的地址看成<strong>域名</strong>，把它的库房来看成<strong>服务器</strong>。而整个超市的运营和管理等工作系统抽象成<strong>博客系统</strong>。</p>
<p>那么通过这样的类比，我想大概你马上就能明白:</p>
<ul>
<li>域名是用来表示描述网站的具体位置，它解决的就是为什么我的博客地址叫 <code>www.sketchk.xyz</code> , 而不是 <code>www.baidu.com</code> 。</li>
<li>服务器是用来存储网站资源的地方，它解决的就是博客里的图片，文字等资源到底放在了哪里。</li>
<li>博客系统是让用户在互联网上建立个人博客的系统，它包含了如何构建博客，如何发布博客，以及如何管理博客等等一系列内容。</li>
</ul>
<p>在文章里面还经常会提到一个名词：<strong>域名解析</strong></p>
<p>这个事就好比我告诉你：“Hi，我们一会在大悦城见面吧！”，你肯定会问哪个大悦城？而不是直接杀向朝阳大悦城，万一我人在西单大悦城呢…  </p>
<p>我们还是用一个例子来说明域名解析，虽然我的博客域名叫做 <code>sketchk.xyz</code>，但它只是一个域名而已，如果你想看我的博客，还是要去存有我博客资源服务器里获取信息，那么通过这个比喻我想域名解析的意思就可以理解为帮助域名找到对应的服务器。</p>
<p>好了，概念就这些，希望没有把你搞糊涂了！</p>
<h2 id="Our-Goal"><a href="#Our-Goal" class="headerlink" title="Our Goal"></a>Our Goal</h2><p>一想到自己马上就会有个非常 cool 的个人博客是不是有点激动呢！</p>
<p>不过这个概念实在太模糊了，我们还是要把事情具体化一下，就好比说当你看完这篇文章以后到底会弄出来什么东西呢？</p>
<p>我的预期目标是你的博客可以有以下几个特点：</p>
<ul>
<li>有一个你亲自挑选的域名</li>
<li>使用 <code>GitHub Pages</code> 服务解决服务器的问题</li>
<li>使用 <code>Hexo</code> 框架来做你的博客系统</li>
<li>使用 <code>NexT</code> 主题并做一些自定义的设定</li>
<li>使用 <code>Travis CI</code> 实现博客的自动部署</li>
</ul>
<p>这些东西现在看起来有点似懂非懂，不用着急，慢慢把这几篇文章看我，你就会明白我说的这些东西都代表什么意思了！</p>
<p>这一篇的内容就到此结束了，下面我们会讨论域名和服务器的话题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章先说说搭建个人博客中常见的基本概念吧。&lt;/p&gt;
    
    </summary>
    
      <category term="DIY" scheme="http://sketchk.xyz/categories/DIY/"/>
    
      <category term="Blog" scheme="http://sketchk.xyz/categories/DIY/Blog/"/>
    
    
      <category term="Blog" scheme="http://sketchk.xyz/tags/Blog/"/>
    
      <category term="Hexo" scheme="http://sketchk.xyz/tags/Hexo/"/>
    
      <category term="Next" scheme="http://sketchk.xyz/tags/Next/"/>
    
      <category term="Travis CI" scheme="http://sketchk.xyz/tags/Travis-CI/"/>
    
      <category term="Domain" scheme="http://sketchk.xyz/tags/Domain/"/>
    
      <category term="GitHub Pages" scheme="http://sketchk.xyz/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 8 的 Debug 新特性 ---- WWDC 2016 Session 410 &amp; 412 学习笔记</title>
    <link href="http://sketchk.xyz/2016/10/20/New-Debugging-Feature-In-Xcode8/"/>
    <id>http://sketchk.xyz/2016/10/20/New-Debugging-Feature-In-Xcode8/</id>
    <published>2016-10-20T09:37:32.000Z</published>
    <updated>2017-03-26T13:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>把最近学习的两个关于 debug 的 WWDC 跟大家分享下 : ]</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-e82af8ddd45b88f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>本文针对 WWDC 2016 Session 410 和 412 以及 WWDC 2015 Session 413 中的内容进行了整理.   </p>
<p>文中主要倾向于如何使用,以及这些工具的使用场景, 如果想了解这些工具的工作原理或者细节方面的东西,请大家观看原视频即可.具体链接在文中最后的参考资料里.  </p>
<p>废话少说,接着往下看吧.</p>
<h2 id="Static-Analyzer"><a href="#Static-Analyzer" class="headerlink" title="Static Analyzer"></a>Static Analyzer</h2><p>Static Analyzer 是一个常见的 debug 的工具, 苹果工程师在 WWDC 中是这样介绍它的:</p>
<ul>
<li>不需要 running code (unlike sanitizers)</li>
<li>在处理 edge-case 的 bugs 时, 有着优异的表现</li>
<li>支持 C, C++ 和 Objective-C</li>
</ul>
<h3 id="如何使用-Static-Analyzer"><a href="#如何使用-Static-Analyzer" class="headerlink" title="如何使用 Static Analyzer"></a>如何使用 Static Analyzer</h3><p>使用 Static Analyzer 很简单, 你可以通过选择 <code>Product -&gt; Analyze</code> 或者 <code>Cmd + Shit + B</code> 的方式执行, 如果有错误,就会在 Issue Navigator 上显示出来</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-158702dc7f7ba131.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在今年的 Session 412 中, Apple 的工程师告诉我们在 Xcode 8 中, Static Analyzer 能够检测出三种新的错误, 它们分别是:</p>
<ul>
<li>Localizability </li>
<li>Instance Cleanup</li>
<li>Nullability </li>
</ul>
<p>看英文有点不好理解,不用担心,接着往下看,咱们一个个的说.</p>
<h3 id="Localizability"><a href="#Localizability" class="headerlink" title="Localizability"></a>Localizability</h3><p>Localizability 其实说的是 Static Analyzer 现在能够检测出本地化信息缺失的问题,目前能够检测出来两种类型的错误, 一种是没有使用 NSLocalizeString 这样的 API, 而直接给控件设置 Sting 的情况, 一种是使用了相应的 API, 但在 comment 信息里面赋值为 nil. 如果有错, 就会像下图一样, 在代码下方出现一个蓝色提示条, 告诉开发者具体的错原因.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-c58b5d9a7b6322ea.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在 Xcode 里,检测第二种类型的错误并不是默认开启的,如果想开启,需要在BuildSting 中进行如下设置: </p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-550e697f682e7cee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="Instance-Cleanup"><a href="#Instance-Cleanup" class="headerlink" title="Instance Cleanup"></a>Instance Cleanup</h3><p>Instance Cleanup 说的是什么呢? </p>
<p>这说的是在 MRC 的代码中, 尤其在 dealloc 中,我们不应该对 assign 类型的属性进行 release 操作,应该对 retain 或者 copy 类型的属性进行 release 操作, 如果不这样操作的话,会引发一些不必要的麻烦. 不过现在有了 Xcode 8, 这些问题就交给 Static Analyzer 吧,它能够很准确的检测出这样的错误.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-fa9f60b1b30c5280.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-db5e7986ffee3462.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>Anyway, 还是建议你把代码转成 ARC 吧! 不知道怎么转, 看下图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-2473645f7840b0cd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="Nullability"><a href="#Nullability" class="headerlink" title="Nullability"></a>Nullability</h3><p>关于这个话题是说的什么呢?  </p>
<p>首先我们得先说说在 2015 年的 WWDC 大会上, Objective-C 引入的一个新特性就叫做 Nullability, 用于表明一个东西到底可以为 nil 还是不可以为 nil , 这和 Swift 里的 option 类型很相似. 既然知道了这个玩意后,我们再说说 Static Analyzer 在这一块到底能够干点什么?   </p>
<p>通俗的说, Static Analyzer 可以检测出在不同场景下是否做到了 nullability 的一致性.   </p>
<p>那么我们一般什么时候会出现 nullability 方面的错误呢?</p>
<ul>
<li>Objective-C 与 Swift 混编的场景</li>
<li>在代码中有一些逻辑错误</li>
<li>不正确的注释</li>
</ul>
<p>我想看到这,很多朋友都会对这个功能嗤之以鼻, 并且想着”我只要不使用与 nullability 相关的关键字, Static Analyzer 就肯定不会报错啦.”, 确实从某种角度来说, 你这么干以后, Static Analyzer 确实不会报错了,但这样真的好么? </p>
<p>这就回归到为什么我们需要使用与 nullability 相关的关键字这个问题上, 我认为主要的原因有三个:</p>
<ul>
<li>便于跟 Swift 的交互</li>
<li>方便使用者明白开发者的意图</li>
<li>能够将一些不必要的问题提前到编码阶段, 而不是到用户使用时才暴露</li>
</ul>
<p>估计有的朋友会对我的第三个观点不太理解, 不用在这里纠结, 下面的这个例子会解释我的想法.  </p>
<p>首先看这段代码, 我们假设他的使用场景如下, 这是一个类似地理位置的抽象类, 对于这样的类,它可以有一个方法来描述它所在的城市或者国家, 这个方法看起来是没有任务错误的, 但其实里面是有缺陷的, 现在假设我们在大西洋的某个不知名的海域中, 由于这个地方既不属于某个城市, 更不属于某个国家, 那么由于 <code>name</code> 的初始值为 <code>nil</code> , 那么他的返回值一定为 <code>nil</code>, 这就与 API 设计者规定的 <code>nonnull</code> 相互冲突了, 万幸的是 Static Analyzer 帮我们检测到了这一切. </p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-22dcbaab6ed3535e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>但假如我们没有使用 nonnull 关键字呢? 那么这段话本来是要用于展示在某个 label 上的,但由于返回值为空, 屏幕上空空如也, 用户好几脸懵逼, PM 和 QA 的同事火速杀到你的工位前……<br>总之,不用我说,你应该能明白我意思了, 这就是我说的:</p>
<blockquote>
<p>能够将一些不必要的问题提前到编码阶段, 而不是到用户使用时才暴露</p>
</blockquote>
<p>我们再来看一个例子说明下不正确的宏注释产生的问题,在<code>NS_ASSUME_NONNULL_BEGIN</code> 和 <code>NS_ASSUME_NONNULL_END</code> 之间的属性都会被默认为 <code>nonnull</code> 类型, 那么看下面的代码: </p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-539aae6d5b2a6fa8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在日常的工作中,我们经常是从某个人手里接过来一段代码进行开发, 假设在这个文件里, 由于整个代码已经到了近 1000 行, 且有好几个类在同一个 <code>.m</code> 文件中, 所以两个宏写的非常隐蔽, 你根本没有察觉到它们的存在.  </p>
<p>然后你很自信的声明了一个再普通不过的的 <code>pressure</code> 属性, 并重写了它的 <code>get</code> 方法, 同时我们的逻辑很清楚, 这是一个人拥有的方法, 如果他有压力计的话就测量一下压力,并返回这个压力值,如果没有压力计的话,就返回 nil , 这个逻辑看起来是如此的正确, 但你一运行就 crash , 是不是很崩溃. </p>
<p>好在 Static Analyzer 告诉了我们问题的关键, OK, 这个 bug 很快就能解决了.</p>
<h2 id="Runtime-Issue"><a href="#Runtime-Issue" class="headerlink" title="Runtime Issue"></a>Runtime Issue</h2><p>说完了Static Analyzer, 我们来说说 Runtime Issue 这个东西,就像下面这个图展示的一样, 你可以认为以后见到这个紫色的感叹号标志就是一个 runtime issue , 哦, 顺道说一下左边的两个分别是 Error 和 Warnning 状态, 右边的两个分别是 Static Analyzer Issue 和 UI Test Failed 的状态, 不同于其余这些东西的出现时间, runtime issue 是出现在程序运行期间的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-459dffa8ea0a5fbe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>目前支持 Runtime Issue 的工具有三个, 分别是 Debug View Hierarchy , Thread Sanitizer 和 Debug Memory Graph , 我们会在下面的话题一个个介绍给大家! </p>
<p>嗯呐, 总之, Runtime Issue 的话题就告一段落啦.</p>
<h2 id="View-Debugging-Enhancements"><a href="#View-Debugging-Enhancements" class="headerlink" title="View Debugging Enhancements"></a>View Debugging Enhancements</h2><p>View Debugging 到底指的是什么呢? 我想各位看英文时候可能有点懵逼, 但看完下面两张图是不是瞬间明白我在说神马了!!!</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-9e1ffd2219f9aff4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-5fab644961acc4e5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>嗯呐, 就是这个功能叫做 View Debugging, 也可以叫做 Debug View Hierarchy, anyway, 你喜欢啥就叫啥吧,</p>
<h3 id="Enhancements"><a href="#Enhancements" class="headerlink" title="Enhancements"></a>Enhancements</h3><p>这个功能在 Xcode 6 就有了, 那么在 Xcode 8 上又有了哪些提升呢? 苹果工程师给出答案是这样的, </p>
<ul>
<li>up to 70% faster snapshots</li>
<li>layout and transform accuracy</li>
<li>blur rendering</li>
<li>navigator filtering</li>
<li>jump to class</li>
<li>auto layout debugging</li>
</ul>
<p>至于第一个改进点,大家可能需要自己去感受,我也确实没有兴趣做一个数据对比, 毕竟 PM 还找我做需求呢…<br>那么我们说下后面五个改进点吧.</p>
<h4 id="layout-and-transform-accuracy"><a href="#layout-and-transform-accuracy" class="headerlink" title="layout and transform accuracy"></a>layout and transform accuracy</h4><p>这到底是说神马呢? 难道是说以前的 layout 和 transform 不准确么? No, No, No, 并不是说以前不准确,而是说现在比以前更精确了, What, 我说的话是不是好绕,还是直接上图吧…</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-63827dd949eb6d04.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-7a401cbfac0753b3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-ec0a20f3b9b1f556.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>所以说你看出来神马名堂了么? 在 Xcode 8 里能够更加精确的表明这些约束的意义, 例如是否是等比例缩放(第一张的比例值), 是否是权值较低的约束(第二张的虚线段), 是否是一个不绝对相等的约束(第三张的小于等于). 这些在 Xcode 7 里都是没有体现出来的, 总之通过这些标记, 能够让我们更加清晰的了解到这些约束的意义, 而不只是一根实线而已</p>
<h4 id="blur-rendering"><a href="#blur-rendering" class="headerlink" title="blur rendering"></a>blur rendering</h4><p>这是说在新的 debug 模式下,我们能够看到 blur 层了. 是不是很美好</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-6504d3f9968a2dfc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="navigator-filtering"><a href="#navigator-filtering" class="headerlink" title="navigator filtering"></a>navigator filtering</h4><p>这个东西我觉得还是蛮好使的, 因为原先在 Navigator 里找某个控件时, 真的很难, 尤其在那种结构复杂的界面里, 就看着自己点着那个三角按钮一遍又一遍的… </p>
<p>Xcode 8 在今年很好的解决了这些个问题, 我们现在在 Navigator 中可以通过控件的内存地址来定位, 也可以通过它的类名来定位, 甚至可以使用控件中展示的 String 内容来定位. </p>
<p>这样一来, 找控件就变得很 easy 了, 是不是!!! 不信, 你看下面的这张图. </p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-0973bdb86577f0c8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="jump-to-class"><a href="#jump-to-class" class="headerlink" title="jump to class"></a>jump to class</h4><p>这个新增的功能充分体现了苹果工程师的人文关怀, 试想一下, 我们每次在定位到对应的控件后, 如果想要修改其 layout 的相关属性时, 有些人会到左边的 Project Navigator 中的层级结构里找对应的<code>.m</code>或者<code>.h</code>文件, 熟悉快捷键的人可能会用 `Cmd + Shit</p>
<ul>
<li>O `直接跳转到对应的类中, 总之,你都得想想这个东西的类名, 并输入点字符神马的, 很麻烦.</li>
</ul>
<p>但在Xcode 8 之后, 我们只需要去 UI 控件的 Object Inspector 的界面里点一下右边深灰色的前进按钮, 嗖的一下,我们就跳转到了对应类的文件中</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-543685f210b66b46.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="auto-layout-debugging"><a href="#auto-layout-debugging" class="headerlink" title="auto layout debugging"></a>auto layout debugging</h4><p>这个功能就要结合之前的 runtime issue 话题了, 废话少说, 先上个图给你们瞅瞅.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-cdca1cc161df6c77.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>我们可以看到,如果我们在布局控件中有错误的话, 我们点击 Debug View Hierarchy 后, Xcode 8 就会报出来一堆 Runtime Issue , 这个功能是不是很吊, 以后写约束再也不怕不怕啦, 毕竟有错, 咱们就按提示改呗. </p>
<h3 id="Debug-Workflow"><a href="#Debug-Workflow" class="headerlink" title="Debug Workflow"></a>Debug Workflow</h3><p>这一块的内容并不是某个 Session 里提到的, 而是我在看这些个 WWDC 后总结出来的, 你可以发现苹果的工程师在解决这些问题时, 都是有一个套路的, 套路的英文我也不知道是啥, 就用个 workflow 吧.<br>他们在解决带有 runtime issue 的问题时, 都会遵循这样一个解决思路</p>
<ol>
<li>Activity Viewer : 查看 Activity Viewer 上是否有错误提示</li>
<li>Issue Navigator : 在 Issue Navigator 上初步了解错误的类型</li>
<li>Debug Navigator : 在这些界面上了解其层级结构, 调用顺序, 堆栈信息, 对象持有的层级结构图等信息</li>
<li>Inspector : 查看具体的细节,并分析错误的原因</li>
<li>Source code : 使用 jump to class 功能进入源代码,并修改</li>
</ol>
<p>至于这个东西, 我觉得可能需要大家自己在实践中慢慢体会, 才会更深入的理解为什么会有这些 debug 工具的产生和为什么他们要在这里提示.<br>当然这也是个仁者见仁,智者见智的问题, anyway 你若安好, 便是晴天! </p>
<h2 id="Memory-Graph-Debugging"><a href="#Memory-Graph-Debugging" class="headerlink" title="Memory Graph Debugging"></a>Memory Graph Debugging</h2><p>讲完了 View Debugging Enhancement , 我们来说说今年 Xcode 8 推出的 Memory Graph Debugging.</p>
<p>最近看到很多公众号和微博都有朋友在说这个特性, 我在这里就不花费太多的篇章去讲它, 更多的说说我觉得在其他文章里没提到的东西吧.</p>
<p>在说这个东西之前, 不知道大家是否知道以下三个命令, 如果没有大家不妨在自己的机子上试一试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ heap YourAppName</div><div class="line">$ leaks YourAppName</div><div class="line">$ malloc_history YourAppName Address</div></pre></td></tr></table></figure>
<p>好吧,假设看到这时, 你已经按照我说的那样,按使用了上面的几个命令, 那么下面我就得告诉你一个真相.  </p>
<p>其实 Memory Graph Debugging 就是把这样的一套东西变成了UI界面而已.</p>
<h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3><p>那么我们接着说说如何使用它吧, 它的使用方式很简单, 在 app 运行的时候, 点击 Debug View Hierarchy 按钮旁边的 Debug Memory Graph 按钮即可, 对就是那个三个圆圈两个线的按钮.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-48f0377ad7f20e1f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>哦, 对了如果你想看到对象的 malloc_history, 记得在 Diagnostic Scheme Tab 页面里面选择 Malloc Stack , 否则你是看不到任何信息的, 命令行也是如此, 另外, 苹果的工程师还说如果勾选了 Malloc Scribble, 整个结果会更加精确</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-3caa56c7083929c8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>那么我们来看看点击 Debug Memory Graph 按钮后的效果吧</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-c2b4008a1d674a45.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>通过这段时间的使用呢, 大致总结出来这样的一些规律</p>
<ul>
<li>绿色的一般都是 UIKit 控件及其子类</li>
<li>蓝色一般 NSObject 类及其子类</li>
<li>黄色一般都是容器类型及其子类</li>
<li>灰色括号是指 block</li>
</ul>
<p>当然还有很多一些其他的类型,具体的大家去看右上角的 Memory Inspect 界面就好,上面都会有详细的信息</p>
<p>另外这一块还要跟大家交流的就是在 Session 410 中, 苹果的工程师说了一些内容, 希望开发者们在使用 Memory Graph Debug Tool 时能够知道:</p>
<ol>
<li>为了避免误报内存泄漏的问题, 苹果在展示 Memory Graph 时, 增加了一些引用, 这些引用只是为了避免误报</li>
<li>在 Memory Graph 所有的强引用都是黑色实线, 而灰色实线并不是弱引用, 只是一些系统级别的引用或者苹果为了优化显示效果而添加的, 就像上面第一条说的那样, 所以在看到灰色的引用时, 就自动忽略它吧</li>
<li>关于运行效率方面, 苹果工程师也说了,如果只是为了看 Memory Graph , 在 Malloc Stack 选项中, 直接选择 <code>Live Allocations Only</code> 即可, 这样会避免过多的性能消耗</li>
<li>另外, Swift 3 在 Memory Graph 上的表现要相对较好一些</li>
<li>Sanitizer 与这个功能不能同时开启, 至于为什么, 你自己看完这几个 session 就会明白了</li>
</ol>
<h3 id="memgraph-file"><a href="#memgraph-file" class="headerlink" title=".memgraph file"></a><code>.memgraph</code> file</h3><p>另外 Xcode 8 专门提供了一个文件格式来保存某一时刻 app 的 Memory Graph, 当然这个文件你是没法 run 起来的, 它只是个graph, 你要明确这一点.</p>
<p>对于喜欢命令行的小伙伴来说, 苹果还提供了一下的操作指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ leaks --outputGraph=&lt;path&gt; &lt;process&gt;                    //creates .memgraph file</div><div class="line">$ &#123;leaks|vmmap|heap&#125; &lt;path/to/file.memgraph&gt; [options]    //operate on .memgraph file</div></pre></td></tr></table></figure>
<h2 id="Sanitizer"><a href="#Sanitizer" class="headerlink" title="Sanitizer"></a>Sanitizer</h2><h3 id="What-does-Sanitizer-mean"><a href="#What-does-Sanitizer-mean" class="headerlink" title="What does Sanitizer mean?"></a>What does Sanitizer mean?</h3><p>Santize在英文里面有美化, 优化的意思, 可想而知 Sanitizer 就是一个用于优化的工具.<br>那么 Xcode 中的 Sanitizer 到底是什么呢? 在 WWDC 2015<br>Session 413 中, 苹果的工程师给出以下条目来介绍 Sanitizer:</p>
<ul>
<li>Find bugs at run time</li>
<li>Similar to Valgrind</li>
<li>Low overhead</li>
<li>Work with Swift 3 and C/C++/OC</li>
<li>Integrated into Xcode IDE</li>
</ul>
<p>那么到底 Sanitizer 在 Xcode 里怎么使用呢? 其实很简单, 打开 Product -&gt; Scheme -&gt; Edit Scheme, 就会弹出如下的界面, 我们在 Diagnostics 中能够看到这样一个标题 <code>Runtime Sanitization</code>, 在它下面有 <code>Address Sanitize</code> 和 <code>Thread Sanitizer</code> 两个选项, 我们只需要勾选相应的 Sanitizer 即可.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-f5937a21f5bc2e2c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>说到这里还必须多说几句, 此处如果你只是勾选了相应的选项并不代表你就能使用 Sanitizer 来 Check 代码了, 你还必须重新 run 一下代码, 为什么呢? </p>
<p>这就必须说说整个代码 build flow 了. 如下图所示, 通过勾选了对应的选项, Xcode 会向 clang 传递一个特定的参数, 然后生成一个独特的 binary, 然后这个 binary 会和 Thread Sanitizer 或者 Address Sanitizer 的 dylib 链接在一起. 这样 Sanitizer 就实现了它想要达到的功能. </p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-b3a58fd1cf107857.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>至于每个 Sanitizer 的实现原理, 我这里就不过多描述了, 建议大家直接观看 WWDC 2015 Session 413 ( Address Sanitizer ) 和 WWDC 2016 Session 412 ( Thread Sanitizer ) , 我们这里还是着重介绍它们的使用方法和使用场景.</p>
<p>总之, 你需要记住的就是, 在使用 Sanitizer 的时候, 要重新 Run 一下代码哦.</p>
<h3 id="Address-Sanitizer-ASan"><a href="#Address-Sanitizer-ASan" class="headerlink" title="Address Sanitizer ( ASan )"></a>Address Sanitizer ( ASan )</h3><p>ASan 其实是 Xcode 在去年新增的一个功能, 它主要用于检测一些内存方面的错误, 在 Xcode 8 里, ASan 已经全面支持了 Swift, 这应该是它唯一新增的一个功能.</p>
<p>那么 ASan 到底能检查哪些类型的错误呢? 苹果工程师列举了以下六种:</p>
<ul>
<li>Use after free </li>
<li>Heap buﬀer overﬂow </li>
<li>Stack buﬀer overﬂow </li>
<li>Global variable overﬂow </li>
<li>Overﬂows in C++ containers </li>
<li>Use after return</li>
</ul>
<p>哦对了, 苹果的工程师还说后面四种是 ASan 独有的功能, 当然说这话的时候是 2015 年, 不知道 2016 年的时候, 其他的 debug 工具有啥进步没.</p>
<p>说了这么多,咱们来看看下面这段代码吧.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-9a992567b4d9d912.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>大家应该能够看出来如果用 <code>buffer[80]</code> 的话是会产生数组越界的问题, 虽然 malloc 了 80 个位置,但起始位置是从 0 开始的.   </p>
<p>但现实呢, 这段代码在不开启 ASan 的状况下, 百分之九十九都不会产生 crash , 而且产生 crash 的时候也不会像图中红色文字那样明确的告诉你这是一个 Heap buffer Overflow 问题.</p>
<p>这就是 ASan 的作用, 所以如果再遇到内存问题, 不用再诚惶诚恐的改完代码后使用哎弥陀佛 Cmd + R 大法了, 是不是很 nice!</p>
<h3 id="Thread-Sanitizer-TSan"><a href="#Thread-Sanitizer-TSan" class="headerlink" title="Thread Sanitizer ( TSan )"></a>Thread Sanitizer ( TSan )</h3><p>最近发现不少公众号和微博在说 Xcode 8 的新特性时, 都在说 Debug View Hierarchy 和 Debug Memory Graph 的相关内容, 但说实话, 我觉得今年 Xcode 8 最令人兴奋的就是添加了 Thread Sanitizer 这个功能, 说真的, 这个功能太有用了, 为什么呢?</p>
<p>让我们想想自己在调试线程方面的 bug 时, 有哪些令人记忆深刻的东西:</p>
<ul>
<li>线程方面的 bug 对时间很敏感, 这就导致很多线程的 bug 极难复现, 复现都成问题, 还怎么改 bug </li>
<li>由于线程的抽象概念导致在 debug 时候也比一般的 debug 更费劲儿, 这时候总觉自己脑子不够使</li>
<li>有时候, 由于线程引起的 crash 或者 error ,让我们根本意识不到这其实是线程出了问题</li>
</ul>
<p>相信上面的三点总会有一个让你刻骨铭心……</p>
<p>那么我们赶紧说说怎么开启 TSan 来帮我们检查线程问题吧. 喂喂, 这个咱们就不再说一遍了吧, 记得看 ASan 章节里的那个图片, 在 Address Sanitizer 下面就行 Thread Sanitizer 啦.</p>
<p>至于 Thread Sanitizer 下面的那个 <code>Pause on Issues</code> 的选项就是说, 如果你想一个一个看 runtime issue 就勾选它, 如果你不想这样, 就不要勾选它, 具体是个神马感觉, 你自己试试喽.</p>
<p>如果你喜欢使用 Comman-Line ,那么请记住下面的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//Compile and Link with TSan</div><div class="line">$ clang -fsanitize=thread source.c -o executable</div><div class="line">$ swift -sanitize=thread source.swift -o executable</div><div class="line">$ xcodebuild -enableThreadSanitizer YES</div><div class="line"></div><div class="line">//Stop after the first error</div><div class="line">$ TSAN_OPTIONS=halt_on_error=1 ./executable</div><div class="line">``` </div><div class="line"></div><div class="line">哦, 还要加一句, TSan 现在只支持 64为 macOS, 以及 64位的 iOS 和 tvOS 的模拟器, 并不支持真机调试和 watchOS.</div><div class="line"></div><div class="line">那么 TSan 作为一个能够检查线程错误的工具, 它现在能检查哪些类型的错误呢? 苹果给出的答案如下:</div><div class="line"></div><div class="line">* Use of uninitialized mutexes</div><div class="line">* Thread leaks (missing `phread_johin`)</div><div class="line">* Unsafe calls in signal handlers (ex:`malloc`)</div><div class="line">* Unlock from wrong thread </div><div class="line">* Data race</div><div class="line"></div><div class="line">那么我们拿下面的这段代码来举例:</div></pre></td></tr></table></figure>
<ul>
<li><p>(void)viewDidLoad {<br>  [super viewDidLoad];<br>  [self resetStatue];<br>  pthread_mutex_init(&amp;(_mutex), NULL);<br>}</p>
</li>
<li><p>(void)resetStatue{<br>  [self acquireLock];<br>  self.dataArray = nil;<br>  [self releaseLock];<br>}</p>
</li>
<li><p>(void)acquireLock{<br>  pthread_mutex_lock(&amp;_mutex);<br>}</p>
</li>
<li><p>(void)releaseLock{<br>  pthread_mutex_unlock(&amp;_mutex);<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这段代码的意思是,我们在 viewDidLoad 方法里面重新 reset 自己的状态, 为了防止多个线程去访问同一个 dataArray 属性, 造成 data race 的状态, 我们在 resetStatus 的时候需要加锁, 但当前代码中,我们实际上调用的是一个没有初始化的锁 ( init 方法在 resetStatus 方法下面哦) , 但这段代码在实际运行的过程中,百分之九十九也不会出现 crash, 但有了 TSan 后, 我们来看看发生了什么变化</div><div class="line"></div><div class="line">![](http://upload-images.jianshu.io/upload_images/406302-9d2a08e5b865d35c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line">发现 runtime issue 的标志了么! 看不清啊,那我们把左边的 Issue Navigator 放大一下</div><div class="line"></div><div class="line">![](http://upload-images.jianshu.io/upload_images/406302-a8a4442dbeee8fc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line">发现没有,在 Issue Navigator 中, TSan 明确的告诉了我们错误的类型, 而且把线程中的历史信息都记录了下来以便我们分析并解决这个问题, 有没有很贴心!</div><div class="line"></div><div class="line">通过这个问题, 你发现了什么问题么?</div><div class="line"></div><div class="line">* 首先 TSan 并没有触发 Crash 并且成功捕获到了这个线程问题, 这说明 TSan 不需要我们去复现 crash 来捕获错误</div><div class="line">* 然后你在不同机型, 不同环境下运行带有线程错误的程序, 你会发现每次 TSan 都能捕获到这个 bug, 这说明 TSan 对时间是不敏感的.</div><div class="line"></div><div class="line">这样安全可靠的 debug 工具你怎能不爱呢! </div><div class="line"></div><div class="line">说道这, 不妨我们多说一点, 大家都知道 data race 是线程中最常出现的问题, 造成 data race 的情况无非就是两种, 一种是逻辑错误, 一种是没有加锁. 在这里我特别想分享一个我自己在使用 TSan 时编写的小 Demo. </div><div class="line"></div><div class="line">我们先看一下代码的使用场景, 我们假设有三个售票员在卖票, 票的数量由 `ticketsCount` 决定, 同时我们将售票员抽象成一个线程类:</div></pre></td></tr></table></figure>
<p>  self.ticketsCount = 100;</p>
<p>  NSThread *thread1 = [[NSThread alloc] initWithTarget:self selector:@selector(saleTicket) object:nil];<br>  thread1.name = @”售票员1”;<br>  self.thread1 = thread1;</p>
<p>  NSThread *thread2 = [[NSThread alloc] initWithTarget:self selector:@selector(saleTicket) object:nil];<br>  thread2.name = @”售票员2”;<br>  self.thread2 = thread2;</p>
</li>
</ul>
<pre><code>NSThread *thread3 = [[NSThread alloc] initWithTarget:self selector:@selector(saleTicket) object:nil];
thread3.name = @&quot;售票员3&quot;;
self.thread3 = thread3;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后我们执行下面的这段代码</div></pre></td></tr></table></figure>
<pre><code>for (NSUInteger count = self.ticketsCount; count &gt; 0; count--) {
    if (count &gt; 0) {
        [NSThread sleepForTimeInterval:0.1];
        NSString *name = [NSThread currentThread].name;
        dispatch_async(dispatch_get_main_queue(), ^{
            self.ticketsCount = count - 1;
            NSString *string = [NSString stringWithFormat:@&quot;%@卖了一张票, 还剩%zd张票&quot;, name, self.ticketsCount];
            self.ticketsCountLabel.text = string;
            NSLog(@&quot;%@&quot;, string);
        });
    } else {
        dispatch_async(dispatch_get_main_queue(), ^{
            NSLog(@&quot;票卖完了&quot;);
        });
        return;
    }
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">会发生什么呢? 显而易见,由于没有加锁, 售票员会卖出去不该卖出去的票</div><div class="line"></div><div class="line">![](http://upload-images.jianshu.io/upload_images/406302-fa93ac20dfdd9071.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line">那我们加个锁试试?</div></pre></td></tr></table></figure>
<pre><code>@synchronized (self) {
    for (NSUInteger count = self.ticketsCount; count &gt; 0; count--) {
        if (count &gt; 0) {
            [NSThread sleepForTimeInterval:0.1];
            NSString *name = [NSThread currentThread].name;
            dispatch_async(dispatch_get_main_queue(), ^{
                self.ticketsCount = count - 1;
                NSString *string = [NSString stringWithFormat:@&quot;%@卖了一张票, 还剩%zd张票&quot;, name, self.ticketsCount];
                self.ticketsCountLabel.text = string;
                NSLog(@&quot;%@&quot;, string);
            });
        } else {
            dispatch_async(dispatch_get_main_queue(), ^{
                NSLog(@&quot;票卖完了&quot;);
            });
            return;
        }
    }
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">加锁后,我们发现售票员确实没有再卖出去不该卖的票,但是好像只有一个售票员在卖票.  </div><div class="line"></div><div class="line">![](http://upload-images.jianshu.io/upload_images/406302-06af1dd4b1f23cb0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line">这显然是一个逻辑错误, 我们锁住更像是线程, 而不是资源, 所以我们再改进一下</div></pre></td></tr></table></figure>
<pre><code>while (1) {
    @synchronized (self) {
        if (self.ticketsCount &gt; 0) {
            [NSThread sleepForTimeInterval:0.1];
            NSString *name = [NSThread currentThread].name;
            self.ticketsCount = self.ticketsCount - 1;
            dispatch_async(dispatch_get_main_queue(), ^{
                NSString *string = [NSString stringWithFormat:@&quot;%@卖了一张票, 还剩%zd张票&quot;, name, self.ticketsCount];
                self.ticketsCountLabel.text = string;
                NSLog(@&quot;%@&quot;, string);
            });
        } else {
            dispatch_sync(dispatch_get_main_queue(), ^{
                NSLog(@&quot;票卖完了&quot;);
            });
            return;
        }
    }
}
</code></pre><p>```</p>
<p>来看看打印台的结果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-59117ef3dd49a63b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>看起来是不是特别完美! 不同的售票员在卖票, 而且也没有出现卖出去不该卖的票, 但是其实这段代码还是有潜在风险的. </p>
<p>What? What? What? 怎么会有错…</p>
<p>这时候我希望你能打开 TSan 来分析下潜在的风险在哪里吧, </p>
<p>PS: 如果你比较懒的话, 好好想想 <code>dispatch_async</code> 用的对么? 如果我在这里么加入了一些危险操作 ?</p>
<p>说到这, 你是不是又一次被 TSan 强大的功能震撼住了, 说真的, TSan 真的是 Xcode 8 里一个非常强大的新功能, 它能够帮我们察觉到很多很多我们自己完全意识不到的细小问题, 而在这些问题经常会弄得我们在 debug 时候苦不堪言, 所以从今天开始, 在你编程的时候, 用一下 TSan 吧</p>
<h2 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h2><p>总结一下今天我们到底说了些什么:</p>
<ul>
<li>一种新的文件格式 : <code>.memgraph</code>  </li>
<li>两个新的概念 : <code>Debug workflow</code> 和 <code>Runtime issue</code>  </li>
<li>三类 debug 工具 : <code>Sanitizer</code>, <code>View Hierarchy Debug Tool</code> , <code>Memory Graph Debug Tool</code></li>
</ul>
<p>最后呢, 想说的很简单,  Use this tools on our project and Make our app better than ever</p>
<h2 id="Reference-Material"><a href="#Reference-Material" class="headerlink" title="Reference Material"></a>Reference Material</h2><p><a href="https://developer.apple.com/videos/play/wwdc2016/410/" target="_blank" rel="external">WWDC 2016 Session 410 - Visual Debugging with Xcode</a> </p>
<p><a href="https://developer.apple.com/videos/play/wwdc2016/412/" target="_blank" rel="external">WWDC 2016 Session 412 - Thread Sanitizer and Static Analysis</a></p>
<p><a href="https://developer.apple.com/videos/play/wwdc2015/413/" target="_blank" rel="external">WWDC 2015 Session 413 - Advanced Debugging and the Address Sanitizer</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把最近学习的两个关于 debug 的 WWDC 跟大家分享下 : ]&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sketchk.xyz/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://sketchk.xyz/tags/iOS/"/>
    
      <category term="Xcode" scheme="http://sketchk.xyz/tags/Xcode/"/>
    
      <category term="Debug" scheme="http://sketchk.xyz/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>FOUR - 一个27岁零基础无业游民的第一个开源作品</title>
    <link href="http://sketchk.xyz/2016/07/26/FOUR-My-First-Open-Source-App/"/>
    <id>http://sketchk.xyz/2016/07/26/FOUR-My-First-Open-Source-App/</id>
    <published>2016-07-25T19:31:27.000Z</published>
    <updated>2017-03-26T13:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>说一说我的第一个个人开源作品，它看似一篇技术文章，但也有点像鸡汤…</p>
<a id="more"></a>
<h2 id="写在前面的废话"><a href="#写在前面的废话" class="headerlink" title="写在前面的废话"></a>写在前面的废话</h2><blockquote>
<p>如果你不喜欢看废话，可以直接绕过第一段哦 : ]</p>
</blockquote>
<p>我是一名 14 年毕业的研究生，当时的主攻方向是能源科技领域，离开校园后就去了上海的一家外企当起了管理培训生，后来还参与了朋友的创业项目，在外人看来，这样的生活还不错。但就是这样还不错的生活，让我一直隐约的感觉到不安，所以在去年的时候，我跟家人说想辞掉现在所有的工作，尝试去做一名程序员。</p>
<p>这样的决定让我的家人和朋友都十分不解，在他们看来我在本科和研究生阶段所学的东西都跟计算机沾不上边（事实情况也确实如此），而且我也已经27岁了，重新进入一个完全陌生的领域代价实在是太大了，虽然有很多不利的因素，但我在今年年初参加完 AtCont 在北京组织的 Swift 开发者大会后，终于下定了决心。</p>
<p>其实参加会议本身到没有什么内容刺激到我，因为当时参会的时候，我甚至都没看完 Swift Programming Language 这本书，现场听得懂的内容也屈指可数（PS :我可是全场唯一一个从新疆赶到北京参会的人啊，但当时我真的一点都不懂 Swift ……），但真正刺激到我的还是这个大环境，为什么这么说呢？</p>
<p>这还要说到现场发生的一个小插曲，会议当天，坐在我前面的是一个帅哥，我完全不认识，大概没多久，我看到<a href="http://weibo.com/kevinzhow?from=feed&amp;loc=at&amp;nick=%E5%91%A8%E6%A5%B7%E9%9B%AFKevin&amp;is_hot=1" target="_blank" rel="external">@周楷雯Kevin</a>从前排起身要出去，刚好路过我这，本以为他就会这么走过去，但他突然停下来，好像认出了坐在我前面的男子，然后两人像老熟人一样说起了话，话里的内容一部分是互相寒暄，另一部分则是对对方作品的赞赏和肯定，后来我才知道坐在我前面的这位男子是<a href="https://itunes.apple.com/app/id947792507" target="_blank" rel="external">奇点</a>的作者<a href="http://www.weibo.com/tualatrix?from=feed&amp;loc=avatar&amp;is_hot=1" target="_blank" rel="external">@图拉鼎</a> 先生，最神奇的是我当时最爱用的微博客户端就是奇点，而此时它的开发者就坐在我的面前…ORZ</p>
<p>这只是当天会议中的许多场景中的某一个片段，你可以在午休时段，看到很多开发者通过某个作品认识到了新的朋友，这让我觉得在这里，人与人之间的关系很简单，有时候可能就是通过在 GitHub 或者 App Store 上的作品，就能把两个完全不认识的，甚至不同肤色，不同国籍，不同语言的两个人联系到一块，这里不是一个靠关系，靠背景的地方，而是一个靠实力，靠能力来说话的地方。</p>
<p>Anyway ，就是这样一次看似简单的参会经历，让我决定了从零基础开始学习 iOS 开发。</p>
<h2 id="FOUR-的由来"><a href="#FOUR-的由来" class="headerlink" title="FOUR 的由来"></a>FOUR 的由来</h2><p>开发这个 app 的初衷一方面是因为看完了《异类》这本书后颇受启发，一方面是觉得如果今后找工作的话，像我这样非计算机专业出身的开发者，怎么也得有个自己的作品才好，所以带着这样的目的，我决定开发一款基于 <code>The 10000 Hour Rule</code> 的 app 。</p>
<p>至于为什么叫 FOUR ，就像我在 app 的引导页中所说一样，假如每天花4个小时去做一件事，至少也需要十年左右才能达成一万小时的要求，所以照此推算，我们在六十岁的时候大概也就能实现四个人生大目标吧，所以就起名叫 FOUR 喽！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-af6628cb70e168c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="The 10000 Hour Rule"></p>
<h2 id="FOUR-的起点"><a href="#FOUR-的起点" class="headerlink" title="FOUR 的起点"></a>FOUR 的起点</h2><h3 id="开发前的思考"><a href="#开发前的思考" class="headerlink" title="开发前的思考"></a>开发前的思考</h3><p>在开发这款 app 时，我曾经认真思考过到底用哪种技术来实现，纯 OC or 纯 Swift , 或者用 React-Native ,  Reactive-Cocoa ，RxSwift 的思想来实现？</p>
<p>面对这些个选择，最开始的时候我是想着用点新技术，虽然使用新技术是体现自己的学习能力，但考虑到时间成本我决定还是先暂时放一放。</p>
<p>在 OC 和 Swift 的选择中，虽然现在大趋势是 Swift ，我自己也系统的学习了 Swift 语言，但考虑到3.0即将到来，我选择采用 OC 开发的策略，一方面可以避免 Swift 语言版本的更新问题，一方面我认为只有在同一个项目中使用两种不同的语言进行开发才可以更好的去理解这两种语言的差异和优劣，所以我不妨先用OC写一遍，等程序比较稳定且 Swift 3.0 正式发布后，我再用 Swift 写一遍，这样岂不是效率更高一些么？</p>
<p>至于 React-Native，Reactive-Cocoa，RxSwift 这样的东西，如果以后有机会，当然也会来写一遍。</p>
<p>为什么？</p>
<p>难道终身学习不是一个程序员的自我修养么！！！</p>
<h3 id="竞品分析"><a href="#竞品分析" class="headerlink" title="竞品分析"></a>竞品分析</h3><p>关于 app 的 UI 设计，我觉得在某种程度上还是蛮重要的，毕竟用户不会直接看到你的代码写的多漂亮，逻辑有多清晰，架构有多合理，他们看到的只是你在手机上的展示的东西，所以 UI 设计的工作就显得尤为重要。<br>周楷雯在 <a href="http://producter.io/" target="_blank" rel="external">《Producter》</a> 一书说道：</p>
<blockquote>
<p>“设计总是从模仿开始，在我的记忆里，第一次做设计是在 Ubuntu 7.04 上用 GIMP 制作壁纸，模仿 Mac 的霞光壁纸，那还是 2007 年的事。”</p>
</blockquote>
<p>所以，我决定也从模仿开始做起，那么模仿什么呢？不如看看 App Store 里都有哪些 app 吧，于是我搜索了与 <code>10000 hour rule</code> 相关的 app ，在搜索前几名的 app 如下：</p>
<ol>
<li>iHour<br>iHour 的功能十分丰富，但正因为丰富的功能设定，使得我在使用过程中显得有些不知所措，但是从功能和设计的角度上来说，这款 app 有不少值得我去借鉴的地方。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-66eb48e5ed7de8e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iHour界面截图"></p>
<ol>
<li>10,000 hours<br>这款 app 虽然看起来相当简陋，也只能添加一个 Task ，但它给我最深刻感受就是简单明了，尤其在我进入 app 的主界面后，没有花费太多时间就能明白制作者的意图，并很快的熟练使用起来，这种设计理念我十分喜欢，虽然设计感还有待提高，但用户的体验还是很好的，这总比花了好几分钟都没有找到计时功能的 iHour 好很多。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-eaa6db9e77367073.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10,000 hours界面截图"></p>
<ol>
<li>Color Time<br>这款 app 呢，我觉得最大的亮点在于 Task 中详细信息的展现上，可以看出开发者肯定是有想法的，不知道是受限于技术问题，还是设计问题，在最终的展现上让人看起来有些奇怪，但不可否认，开发者肯定是想以一种不同于前两个 app 的方式来表达 Task 中的详细信息。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-f74ac694eb798a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Color Time界面截图"></p>
<ol>
<li>10000 Hours To Success<br>这个 app 在某种程度上和 iHour 十分相似，有着不错的 UI 设计，但复杂的操作和奇怪的逻辑让用户的体验感变差不少，尤其是它添加任务，记录任务的方式让我觉得实在太不人性化。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-42a1b3d55abd8bbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10000 Hours To Success界面截图"></p>
<ol>
<li>10000 Hours<br>对于这个 app 而言，你看下面的截图就可以清楚的感受到它的优点和缺点。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-2dea1ca5e61804b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10000 Hours界面截图"></p>
<ol>
<li>Outliers - Law of 10,000 hours<br>说实话，这个 app 的售价是 12 RMB，但我觉得这有点对不起它自己的售价。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-545f5eb571dc62f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Outliers - Law of 10,000 hours界面截图"></p>
<p>在使用完上面六款 app 后，我总结了以下几点感受：</p>
<ul>
<li>优雅的UI设计会为 app 增分，即使用起来有些别扭，毕竟这是一个看脸的社会</li>
<li>合理的交互设计会减少用户的学习负担，一个好的 app 不应该有过多的提示操作，而是应该以一种简明的设计方式来引导用户学习使用</li>
<li>对于类似 To-Do List 类的 app 而言，记录任务和展示信息是两个十分重要的环节，一方面这是用户使用频率最高的环节，一方面也是展现开发者智慧的地方</li>
</ul>
<h2 id="FOUR-的雏形"><a href="#FOUR-的雏形" class="headerlink" title="FOUR 的雏形"></a>FOUR 的雏形</h2><h3 id="关于界面设计"><a href="#关于界面设计" class="headerlink" title="关于界面设计"></a>关于界面设计</h3><p>FOUR 的设计灵感最初来自 <a href="https://dribbble.com/noah_bomb" target="_blank" rel="external">noahbombom</a> 在 Dribbble 上的设计稿，我被这个设计稿吸引的原因有两点：</p>
<ul>
<li>一是因为图片上面刚刚好够展示 4 个图标。</li>
<li>二是其简单大方的设计感，让我很直观的感受到设计者的意图。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-30f71a585a80360f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="noahbombom的设计稿"></p>
<p>选定完样式以后，我就开始考虑 app 的配色问题， noahbombom 在她的设计稿上使用的是非常经典的四个颜色：红黄蓝绿，这四个颜色在很多知名的 app 上都有过不同的展现方式。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-0c5dac8ea2967c35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用红黄蓝绿四个颜色的 LOGO "></p>
<p>正因为红黄蓝绿的经典性，我考虑将其移植到我的 app 设计稿中。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-096d1146b5fe5b76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Logo 的设计稿"><br><img src="http://upload-images.jianshu.io/upload_images/406302-2de85bf0383b2d23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主要界面的效果图"></p>
<h3 id="关于字体设计"><a href="#关于字体设计" class="headerlink" title="关于字体设计"></a>关于字体设计</h3><p>前段时间， <a href="http://weibo.com/u/1956547962?refer_flag=1001030201_" target="_blank" rel="external">MartinRGB</a> 在它的朋友圈里发表了一篇文章 - <a href="https://zi.com/w/a?id=57723a5f0cf29338e7e9a539&amp;shareId=d77bc23e-1e24-46c7-97b7-1932691da2cd&amp;wechatId=o3eBLuDx89dXfBA6HGVeQpsoqGog" target="_blank" rel="external">惬读的设计</a>，这篇文章对我的感触挺大，我觉得虽然 FOUR 不是一款阅读类的 app ，但字体对于用户的体验终究是至关重要的。</p>
<p>不过遗憾的是我对中文字体的理解没有那么深刻，更别说去合理的搭配字体来营造一种十分惬意的感觉，所以我在 FOUR 上并没有对中文字体进行任何的优化和设计。</p>
<p>不过值得高兴的是，由于我平时对各类英文字体有过些许研究，加上自己也会写写画画，所以在制作 FOUR 的时候，我尝试着用 MartinRGB 的思维方式为 FOUR 设计一套合适的字体组合。<br><img src="http://upload-images.jianshu.io/upload_images/406302-83be71d96ca2f205.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我的英文字体作品"></p>
<p>以下是我在总结前人经验的基础上，挑选出的几套比较优秀的字体搭配组合，同时我也将网上使用这种字体组合的应用场景找了出来，以便大家直观的感受。<br>简单的说明一下，下面的图片左边是对当前字号大小和字体细分种类的说明，图片右边的单词就是字体的名称哦。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-884d08faac41c0ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体组合1"></p>
<p>Lato 是一个相对而言较新的字体，它在设计之初被广泛用于带有用户界面的网站设计，这主要是因为它给人一种坚固感和些许的中性风格。 Lato 这个词出自波兰语，关于它的解释呢，我觉得还是用英文原文来做解释比较好，这样能不破坏它的语义。</p>
<blockquote>
<p>Lato means “Summer” in Polish. “Male and female, serious but friendly. With the feeling of the Summer,”<br>– Łukasz Dziedzic, Lato creator.</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-5d23d8090acce3c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体组合2"></p>
<p>这个无衬线的字体组合是根据传统的广告字体进化而来，它能够很快的抓住用户的注意力，尤其是它的一级字体和二级字体造成了很好的视觉对比效果。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-43b155d16320b4d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体组合3"></p>
<p>Kollektif 字体诞生的目的就是为了打破几何字体精致清新的风格，这种字体的视觉冲击感主要在于它的圆形设计和强烈的设计感。而 Gidole 字体是一种细而简明的字体，这与 Kollektif 的沉重感形成了一种很好的互补效果。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-5fa7a92014fec201.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体组合4"></p>
<p>Six Caps 是一种非常紧凑且窄瘦的字体，非常适合用于做标题。与 Archivo Narrow 搭配后能够营造出一种60年代的复古风。加上三级字体采用了 Source Sans Pro 后，三种风格迥异的字体能够很好的表达或者从某种程度上暗示出消息的重要性和顺序性。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-29f00ddcbcd8aa27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体组合5"></p>
<p>Raleway 和 Roboto Condensed 的组合在很多海报中都被使用过，这是一个非常非常经典的搭配，由它们构成的主副标题会给人十分深刻的印象。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-47c4f45b189b9dbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体组合6"></p>
<p>Bebas Neue 在时尚领域里非常讨好，它简明干净的形式使它具有成为一个好标题的所有基本条件，它自身具有很漂亮圆角设计感，同时相比于其他字体来说，它是一个偏瘦的字体，如果有一个相比它而言较为矮胖的字体就会是一个完美的搭配，刚好 Montserrat 就是这样一个非常好的搭配角色。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-f09df1f0d38bbc47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体组合7"></p>
<p>Norwester 是一个非常引人注目的字体，非常适合做标题，当 Norwester 与 Kollektif ，还有 Montserrat 组合在一起能够产生一种极其强烈的几何效果感觉，这也是我非常非常喜欢的一个字体组合。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-656bc45e86a09a1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体组合8"></p>
<p>Roboto Condensed 是 Sans serif 系列的衍生体，十分适合阅读，它被广泛引用在科技领域的文字设计中。相比于它的父类，它在高度上的变化使得它给人一种更加强烈的凝聚感。</p>
<p>对这8种字体组合做完分析后，我认为字体组合1给我的感觉与 FOUR 的气质十分契合，不求轰轰烈烈，只求天长地久， Lato 字体的踏实稳重感正是 FOUR 需要的，所以就选它了！</p>
<h2 id="FOUR的实现"><a href="#FOUR的实现" class="headerlink" title="FOUR的实现"></a>FOUR的实现</h2><p>回顾 FOUR 的整个制作过程，如果从技术角度来看它的话，其实它并没有什么特别的技术难点。</p>
<ul>
<li>在设计模式上，选用了最常见的 MVC 模式。</li>
<li>在数据库上，我使用了移动端的新贵- <a href="https://realm.io/" target="_blank" rel="external">Realm</a> ，原因很简单： Realm 真的好用到哭，有没有！！！</li>
<li>在动画上，用 <a href="https://github.com/IFTTT/JazzHands" target="_blank" rel="external">JazzHands</a> 框架实现了引导页上的动画效果，用 <a href="https://github.com/facebook/pop" target="_blank" rel="external">pop</a> 框架实现了其余部分的动画效果。</li>
<li>在 UI 界面上，咳咳咳，请允许我吐槽一下！但凡在 Github 搜到的那些精致漂亮的 UI 框架都是用 Swift 编写的，为毛就没有人用 OC 写呢！！！哎，好吧，自己从头搭建吧….</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-a99e55cbe2a36751.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FOUR 的界面构成"></p>
<p>仔细琢磨下，唯一值得分享的就是 Analysis 界面的实现，首先用一个动图来展示下它的效果吧。<br><img src="http://upload-images.jianshu.io/upload_images/406302-4c74b25da8062ec5.gif?imageMogr2/auto-orient/strip" alt="Analysis界面的动态效果"></p>
<p>这个界面看起来十分简单，但它能展现的内容却十分丰富：</p>
<ul>
<li>首先它包含每个任务在近一周内的执行时间趋势图。</li>
<li>其次在触摸和滑动曲线的过程中，下端的界面可以弹出任务在某一天内执行的时间长度。</li>
<li>最后在相同的界面中，可以展现出多个任务的曲线走势图。</li>
</ul>
<p>它的实现主要还是基于 <a href="https://github.com/Jawbone/JBChartView" target="_blank" rel="external">JBChartView</a> 的 Demo 而想到的。所以如果大家有兴趣，可以直接阅读该框架的Demo文件，我想一定会有不小的收获，如果你觉得看起来麻烦，也可以看看 <strong><a href="https://github.com/SketchK/FOUR" target="_blank" rel="external">FOUR</a></strong> 的源代码。</p>
<h2 id="FOUR-的诞生"><a href="#FOUR-的诞生" class="headerlink" title="FOUR 的诞生"></a>FOUR 的诞生</h2><p>经过大概 3 周左右的时间，我终于将 FOUR 从一个模糊的概念变成了一个具体的 app ，虽然它还存在着各种各样的缺点，但对于我这样一个半年前还从来未接触过编程的人而言，那种强烈的成就感是不言而喻的。</p>
<p>我到现在还记得当时大概是下午 2 点多提交的 app ，之后我就以每隔半小时的速度刷一遍邮箱，期待着 Apple 的回复。直到凌晨 3 点多，我终于收到审核通过的邮件，那一刻的心情，觉得比当年考上大学还要激动，弄得我后半夜都没睡着。</p>
<p>Anyway ，终于实现了自己在 2015 年给自己许下的心愿。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-a7a4afc0b4a8c8f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Apple的审核通知邮件"></p>
<p>虽然 FOUR 的上架对于我来说是近期工作的一个终点，但从长远来看，这或许才是我在 iOS 开发道路上真正意义上的一个起点。</p>
<p>因此，在 app 上架后，我就将其在 GitHub 上开源了，一方面是希望通过它来记录自己的技术成长，一方面也是希望以后能够有机会和更多优秀的人共同工作，共同成长。<br>至于未来，我希望能像前面说的一样，逐步完成 FOUR 的 swift 版本， React-Native 版本， React-Cocoa 版本等等。</p>
<p>下面是 FOUR 在 Github 和 App Store 上的地址：</p>
<p><strong>GitHub</strong> ： <a href="https://github.com/SketchK/FOUR" target="_blank" rel="external">https://github.com/SketchK/FOUR</a><br><strong>App Store</strong> ： <a href="https://itunes.apple.com/app/id1136588862" target="_blank" rel="external">https://itunes.apple.com/app/id1136588862</a></p>
<p>如果您喜欢 FOUR ，记得给我点个星星哦！</p>
<p>如果对项目任何问题，欢迎在项目主页上提 issue 。</p>
<p>当然 FOUR 里还有个功能就 Donate ，如果各位觉得不错，可以考虑赞助我个可乐神马的！: ]<br>哈哈哈，在此先谢谢各位啦！</p>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>这篇文章基本就要结束了，可能也没什么干货，就是说了说我在制作 FOUR 时都想了什么，做了什么，干了什么。</p>
<p>如果非要说说这篇文章的意义所在，我想应该是：</p>
<blockquote>
<p>我希望通过这篇文章,能够激励更多的人以一种踏踏实实的方式去追寻他们内心向往的东西。</p>
</blockquote>
<p>PS：说这些是因为在加入的这些个 iOS 开发者微信群里，总能听到行业内的人说今天面试了几个伪造简历的年轻人，或者说某某培训机构教学生包装假简历。</p>
<p>我很难想像现在的 iOS 就业市场中，还能有多少比我这样一个已经快要 30 岁，无相关行业经历，无相关专业背景，完全零基础，天资平平的人条件还要差。</p>
<p>在这里我并不想说谁好谁不好，谁对谁不对，我只是觉得踏踏实实的去走自己的路或许能收获更多，至少会多一份自信，少一份不安。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-69d048bb665f2f88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Let&#39;s Be Honest"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说一说我的第一个个人开源作品，它看似一篇技术文章，但也有点像鸡汤…&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sketchk.xyz/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://sketchk.xyz/tags/iOS/"/>
    
      <category term="Personal App" scheme="http://sketchk.xyz/tags/Personal-App/"/>
    
  </entry>
  
  <entry>
    <title>resizableImageWithCapInsets:方法的探析</title>
    <link href="http://sketchk.xyz/2015/07/30/The-Detail-Of-ResizableImageWithCapInsets-Method/"/>
    <id>http://sketchk.xyz/2015/07/30/The-Detail-Of-ResizableImageWithCapInsets-Method/</id>
    <published>2015-07-29T16:12:56.000Z</published>
    <updated>2017-03-20T07:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>让我们深入分析下 resizableImageWithCapInsets: 方法</p>
<a id="more"></a>
<h2 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h2><p>苹果公司为iOS开发者提供了以下的方法用于处理图片的拉伸问题</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)resizableImageWithCapInsets:(<span class="built_in">UIEdgeInsets</span>)capInsets resizingMode:(<span class="built_in">UIImageResizingMode</span>)resizingMode</div><div class="line"><span class="comment">//为行文方便,之后简称该方法为拉伸方法</span></div></pre></td></tr></table></figure>
<p>但在实际使用过程中,我发现自己对该方法的理解不够深入,所以今天特地编写了一些代码来探析该方法!<br>好了,废话不多说,下面我们就开始探析该方法的奥妙吧!</p>
<p>##方法介绍和说明</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)resizableImageWithCapInsets:(<span class="built_in">UIEdgeInsets</span>)capInsets resizingMode:(<span class="built_in">UIImageResizingMode</span>)resizingMode</div><div class="line"><span class="comment">//该方法返回的是UIImage类型的对象,即返回经该方法拉伸后的图像</span></div><div class="line"><span class="comment">//传入的第一个参数capInsets是UIEdgeInsets类型的数据,即原始图像要被保护的区域</span></div><div class="line"><span class="comment">//这个参数是一个结构体,定义如下</span></div><div class="line"><span class="comment">//typedef struct &#123; CGFloat top, left , bottom, right ; &#125; UIEdgeInsets;</span></div><div class="line"><span class="comment">//该参数的意思是被保护的区域到原始图像外轮廓的上部,左部,底部,右部的直线距离,参考图2.1</span></div><div class="line"><span class="comment">//传入的第二个参数resizingMode是UIImageResizingMode类似的数据,即图像拉伸时选用的拉伸模式,</span></div><div class="line"><span class="comment">//这个参数是一个枚举类型,有以下两种方式</span></div><div class="line"><span class="comment">//UIImageResizingModeTile,     平铺 </span></div><div class="line"><span class="comment">//UIImageResizingModeStretch,  拉伸</span></div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-97d6960fd2294e17.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图2.1 capInsets 参数示意图.png"></p>
<h2 id="设计实验方法"><a href="#设计实验方法" class="headerlink" title="设计实验方法"></a>设计实验方法</h2><p>###实验对象</p>
<ul>
<li>Image对象尺寸为60<code>*</code>128(为行文方便,之后简称为原始图像,图3.1)</li>
<li>ImageView对象尺寸为180<code>*</code>384(为行文方便,之后简称为相框)</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-f8be96709d90f10a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图3.1 原始图像.png"></p>
<p>###实验方法</p>
<ol>
<li>对原始图像使用拉伸方法并输入不同的参数</li>
<li>将拉伸后的图像放入相框,观察其拉伸效果</li>
</ol>
<p>###测试软件的界面设计<br>界面设计如图3.2</p>
<ul>
<li>正上方为原始图像窗口,用于显示原始图像的效果</li>
<li>左下方为测试图像窗口,用于显示测试状况的效果</li>
<li>右下方为对比图像窗口,用于显示默认状况的效果</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-72bf074747c7a491.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图3.2 测试软件的界面设计.png"></p>
<h2 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h2><h3 id="拉伸模式"><a href="#拉伸模式" class="headerlink" title="拉伸模式"></a>拉伸模式</h3><p>resizingMode参数为UIImageResizingModeStretch</p>
<h4 id="capInsets参数为UIEdgeInsetsMake-0-0-0-0-时"><a href="#capInsets参数为UIEdgeInsetsMake-0-0-0-0-时" class="headerlink" title="capInsets参数为UIEdgeInsetsMake(0, 0, 0, 0)时"></a>capInsets参数为UIEdgeInsetsMake(0, 0, 0, 0)时</h4><p>当我们向拉伸方法传入该组参数时,代表我们未对原始图像的任何区域进行保护.其拉伸效果如图4.1.1<br><strong>在该种情况下,我们发现原始图像按比例放大了3倍,因此我们将该情况当做拉伸模式下的默认状况</strong></p>
<p><strong>在之后的实验中,我们将该种状况当做参考对象,显示在界面的右下角</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-553c751be57b23e8.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图4.1.1 测试结果1.png"></p>
<h4 id="capInsets参数为UIEdgeInsetsMake-42-0-0-0-时"><a href="#capInsets参数为UIEdgeInsetsMake-42-0-0-0-时" class="headerlink" title="capInsets参数为UIEdgeInsetsMake(42, 0, 0, 0)时"></a>capInsets参数为UIEdgeInsetsMake(42, 0, 0, 0)时</h4><p>当我们向拉伸方法传入该组参数时,代表我们对原始图像上部的三分之一进行保护(即红色方块区域).其拉伸效果如图4.1.2</p>
<p><strong>在该种情况下,我们可以发现拉伸后的图像中:</strong></p>
<ul>
<li>原始图像中受保护的区域(即红色方块区域)在Y轴方向保持了原比例,但在X轴方向进行了拉伸</li>
<li>原始图像中未受保护的区域,直接按比例进行了拉伸</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-f62f15b275831931.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图4.1.2 测试结果2.png"></p>
<h4 id="capInsets参数为UIEdgeInsetsMake-0-20-0-0-时"><a href="#capInsets参数为UIEdgeInsetsMake-0-20-0-0-时" class="headerlink" title="capInsets参数为UIEdgeInsetsMake(0,20, 0, 0)时"></a>capInsets参数为UIEdgeInsetsMake(0,20, 0, 0)时</h4><p>当我们向拉伸方法传入该组参数时,代表我们对原始图像左部的三分之一进行保护(即红色方块区域).其拉伸效果如图4.1.3</p>
<p><strong>在该种情况下,我们可以发现拉伸后的图像中:</strong></p>
<ul>
<li>原始图像中受保护的区域(即红色方块区域)在X轴方向保持了原比例,但在Y轴方向进行了拉伸</li>
<li>原始图像中未受保护的区域,直接按比例进行了拉伸</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-69218879c2013c9d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图4.1.3 测试结果3.png"></p>
<h4 id="capInsets参数为UIEdgeInsetsMake-42-20-42-20-时"><a href="#capInsets参数为UIEdgeInsetsMake-42-20-42-20-时" class="headerlink" title="capInsets参数为UIEdgeInsetsMake(42, 20, 42, 20)时"></a>capInsets参数为UIEdgeInsetsMake(42, 20, 42, 20)时</h4><p>当我们向拉伸方法传入该组参数时,代表我们对原始图像除数字5以外的区域进行保护(即两个红色方块围起来的区域).其拉伸效果如图4.1.4</p>
<p><strong>在该种情况下,我们可以发现拉伸后的图像中:</strong></p>
<ul>
<li>在X轴上,由于1被左边和上边的设置保护,3被右边和上边的设置保护,所以只能用中间的2来拉伸,同理最底下的7,8,9</li>
<li>在Y轴上,由于1被左边和上边的设置保护,7被左边和下边的设置保护,所以只能用中间的4来拉伸,同理最底下的3,6,9</li>
<li>由于5没有被保护,所以在整个剩余的空间中,用5进行拉伸填充</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-369b2e1cf801c638.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图4.1.4 测试结果4.png"></p>
<h3 id="选择平铺模式"><a href="#选择平铺模式" class="headerlink" title="选择平铺模式"></a>选择平铺模式</h3><p>resizingMode参数为UIImageResizingModeTile</p>
<h4 id="capInsets参数为UIEdgeInsetsMake-0-0-0-0-时-1"><a href="#capInsets参数为UIEdgeInsetsMake-0-0-0-0-时-1" class="headerlink" title="capInsets参数为UIEdgeInsetsMake(0, 0, 0, 0)时"></a>capInsets参数为UIEdgeInsetsMake(0, 0, 0, 0)时</h4><p>当我们向拉伸方法传入该组参数时,代表我们未对原始图像的任何区域进行保护.其平铺效果如图4.2.1</p>
<p><strong>在该种情况下,我们发现原始图像按比例填充了相框,因此我们将该情况当做拉伸模式下的默认状况</strong></p>
<p><strong>在之后的实验中,我们将该种状况当做参考对象,显示在界面的右下角</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-e1634cd4f03e26d4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图4.2.1 测试结果1.png"></p>
<h4 id="capInsets参数为UIEdgeInsetsMake-42-0-0-0-时-1"><a href="#capInsets参数为UIEdgeInsetsMake-42-0-0-0-时-1" class="headerlink" title="capInsets参数为UIEdgeInsetsMake(42, 0, 0, 0)时"></a>capInsets参数为UIEdgeInsetsMake(42, 0, 0, 0)时</h4><p>当我们向拉伸方法传入该组参数时,代表我们对原始图像上部的三分之一进行保护(即红色方块区域).其平铺效果如图4.2.2</p>
<p><strong>在该种情况下,我们可以发现拉伸后的图像中:</strong></p>
<ul>
<li>原始图像中受保护的区域(即红色方块区域)在Y轴方向保持了原比例,但在X轴方向进行了平铺填充</li>
<li>原始图像中未受保护的区域,直接按比例进行了平铺,但不包含被保护的区域(注意观察蓝色箭头所指的区域)</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-4070bfdc54fa06cd.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="Paste_Image.png"></p>
<h4 id="capInsets参数为UIEdgeInsetsMake-0-20-0-0-时-1"><a href="#capInsets参数为UIEdgeInsetsMake-0-20-0-0-时-1" class="headerlink" title="capInsets参数为UIEdgeInsetsMake(0,20, 0, 0)时"></a>capInsets参数为UIEdgeInsetsMake(0,20, 0, 0)时</h4><p>当我们向拉伸方法传入该组参数时,代表我们对原始图像左部的三分之一进行保护(即红色方块区域).其平铺效果如图4.2.3</p>
<p><strong>在该种情况下,我们可以发现拉伸后的图像中:</strong></p>
<ul>
<li>原始图像中受保护的区域(即红色方块区域)在X轴方向保持了原比例,但在Y轴方向进行了平铺填充</li>
<li>原始图像中未受保护的区域,直接按比例进行了平铺,但不包含被保护的区域(注意观察蓝色箭头所指的区域)</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-3156e09e8fc1fba8.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图4.2.3 测试结果3.png"></p>
<h4 id="capInsets参数为UIEdgeInsetsMake-42-20-42-20-时-1"><a href="#capInsets参数为UIEdgeInsetsMake-42-20-42-20-时-1" class="headerlink" title="capInsets参数为UIEdgeInsetsMake(42, 20, 42, 20)时"></a>capInsets参数为UIEdgeInsetsMake(42, 20, 42, 20)时</h4><p>当我们向拉伸方法传入该组参数时,代表我们对原始图像除数字5以外的区域进行保护(即两个红色方块围起来的区域).其拉伸效果如图4.2.4</p>
<p><strong>在该种情况下,我们可以发现拉伸后的图像中:</strong></p>
<ul>
<li>在X轴上,由于1被左边和上边的设置保护,3被右边和上边的设置保护,所以只能用中间的2来平铺,同理最底下的7,8,9</li>
<li>在Y轴上,由于1被左边和上边的设置保护,7被左边和下边的设置保护,所以只能用中间的4来平铺,同理最底下的3,6,9</li>
<li>由于5没有被保护,所以在整个剩余的空间中,用5进行平铺填充</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/406302-37c5ce16047b8a0a.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="图4.2.4 测试结果4.png"></p>
<h2 id="结论和建议"><a href="#结论和建议" class="headerlink" title="结论和建议"></a>结论和建议</h2><p>通过8组实验数据可以观察出拉伸方法在平铺模式和拉伸模式下的变化过程和主要区别,由此我们可知:</p>
<ul>
<li>对原始图形使用拉伸方法且在四周增加保护区域后,能保证原始图形的四个角不失真,但其余部分的变化细节则有不同</li>
<li>如果原始图像的外轮廓不平整的话,使用拉伸方式会让外轮廓的不平整度放大,使用平铺方式应该能减小这种情况</li>
</ul>
<h2 id="附录-代码"><a href="#附录-代码" class="headerlink" title="附录-代码"></a>附录-代码</h2><p>为了缩短代码的长度,我使用了Storyboard搭建软件界面,想重现实验的朋友可以自行构建界面,具体的参数我在文章和附录中进行了简要说明,我相信聪明的你一定可以搞定!</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView1;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView2;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView3;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line"><span class="comment">//--imageView1的相关内容------------------------------------------------------------------------------------</span></div><div class="line">    </div><div class="line">    <span class="comment">//相框大小为60 * 128    图片尺寸为60 * 128</span></div><div class="line">    <span class="comment">//读取图片</span></div><div class="line">    <span class="built_in">UIImage</span> *testImage1 = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"123456789"</span>];</div><div class="line">    </div><div class="line">    testImage1 = [testImage1 resizableImageWithCapInsets:<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) resizingMode:<span class="built_in">UIImageResizingModeStretch</span>];</div><div class="line">    <span class="keyword">self</span>.imageView1.image = testImage1;</div><div class="line">    </div><div class="line"><span class="comment">//---imageView2的相关内容-----------------------------------------------------------------------------------</span></div><div class="line">    </div><div class="line">    <span class="comment">//相框为180 * 384    图片尺寸为60 * 128    相框大小为原始图片的3倍</span></div><div class="line">    <span class="comment">//读取图片</span></div><div class="line">    <span class="built_in">UIImage</span> *testImage2 = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"123456789"</span>];</div><div class="line">    <span class="comment">/***********************************************/</span></div><div class="line">    <span class="comment">//方法1 resizableImageWithCapInsets:默认是平铺</span></div><div class="line">    <span class="comment">//方法2 resizableImageWithCapInsets: resizingMode: 方法</span></div><div class="line">    <span class="comment">//  UIImageResizingModeTile,     平铺</span></div><div class="line">    <span class="comment">//平铺的概念是保证原图像大小不变,将新图像填充满</span></div><div class="line">    <span class="comment">//testImage2 = [testImage2 resizableImageWithCapInsets:UIEdgeInsetsMake(0, 0, 0, 0) resizingMode:UIImageResizingModeTile];</span></div><div class="line">    </div><div class="line">    <span class="comment">//将上部的三分之一"保护",然后进行显示</span></div><div class="line">    <span class="comment">//这代表新图像中,上部的三分之一和原图像一样,而其余部分的填充不会使用原图像上部的三分之一</span></div><div class="line">    <span class="comment">// testImage2 = [testImage2 resizableImageWithCapInsets:UIEdgeInsetsMake(42, 0, 0, 0) resizingMode:UIImageResizingModeTile];</span></div><div class="line">    </div><div class="line">    <span class="comment">//将左部的三分之一"保护",然后进行显示</span></div><div class="line">    <span class="comment">//这代表新图像中,上部的三分之一和原图像一样,而其余部分的填充不会使用原图像上部的三分之一</span></div><div class="line">    <span class="comment">// testImage2 = [testImage2 resizableImageWithCapInsets:UIEdgeInsetsMake(0,20, 0, 0) resizingMode:UIImageResizingModeTile];</span></div><div class="line">    </div><div class="line">    <span class="comment">//将四周进行保护后</span></div><div class="line">    <span class="comment">//在X轴上,由于1被左边的设置保护,3被右边的设置保护,所以中间只能用2来平铺,同理,7和9之间的8</span></div><div class="line">    <span class="comment">//在Y轴上,由于1被上边的设置保护,7被下边的设置保护,所以中间只能用4来平铺,同理,3和9之间的6</span></div><div class="line">    <span class="comment">//由于5没有被保护,所以在整个空间中,用5进行平铺来填充剩余的区域</span></div><div class="line">    <span class="comment">// testImage2 = [testImage2 resizableImageWithCapInsets:UIEdgeInsetsMake(42, 20, 42, 20) resizingMode:UIImageResizingModeTile];</span></div><div class="line"></div><div class="line">    <span class="comment">/***********************************************/</span></div><div class="line">    <span class="comment">//resizableImageWithCapInsets: resizingMode: 方法</span></div><div class="line">    <span class="comment">//  UIImageResizingModeStretch,  拉伸</span></div><div class="line">    <span class="comment">//  拉伸的概念是直接按比例将图片放大到与相框尺寸相同的图像,</span></div><div class="line">    <span class="comment">//testImage2 = [testImage2 resizableImageWithCapInsets:UIEdgeInsetsMake(0, 0, 0, 0) resizingMode:UIImageResizingModeStretch];</span></div><div class="line">    </div><div class="line">    <span class="comment">//将上部的三分之一"保护",然后进行显示</span></div><div class="line">    <span class="comment">//保证原图像上部的三分之一在Y轴上不被拉伸,其余部分按剩余比例拉伸</span></div><div class="line">    <span class="comment">//testImage2 = [testImage2 resizableImageWithCapInsets:UIEdgeInsetsMake(42, 0, 0, 0) resizingMode:UIImageResizingModeStretch];</span></div><div class="line">    </div><div class="line">    <span class="comment">//将左部的三分之一"保护",然后进行显示</span></div><div class="line">    <span class="comment">//保证原图像左部的三分之一在Y轴上不被拉伸,其余部分按剩余比例拉伸</span></div><div class="line">    <span class="comment">//testImage2 = [testImage2 resizableImageWithCapInsets:UIEdgeInsetsMake(0, 20, 0, 0) resizingMode:UIImageResizingModeStretch];</span></div><div class="line"></div><div class="line">    <span class="comment">//将四周进行保护后</span></div><div class="line">    <span class="comment">//在X轴上,由于1被左边的设置保护,3被右边的设置保护,所以中间只能用2来拉伸,同理,7和9之间的8</span></div><div class="line">    <span class="comment">//在Y轴上,由于1被上边的设置保护,7被下边的设置保护,所以中间只能用4来拉伸,同理,3和9之间的6</span></div><div class="line">    <span class="comment">//由于5没有被保护,所以在整个空间中,用5进行拉伸来填充剩余的区域</span></div><div class="line">    <span class="comment">//testImage2 = [testImage2 resizableImageWithCapInsets:UIEdgeInsetsMake(42, 20, 42, 20) resizingMode:UIImageResizingModeStretch];</span></div><div class="line">    </div><div class="line">    <span class="comment">//将图片添加到相框</span></div><div class="line">    <span class="keyword">self</span>.imageView2.image = testImage2;</div><div class="line">    </div><div class="line"><span class="comment">//-----imageView3的相关内容----------------------------------------------------------------------------------</span></div><div class="line">    </div><div class="line">    <span class="comment">//读取图片</span></div><div class="line">    <span class="built_in">UIImage</span> *testImage3 = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"123456789"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">/***********************************************/</span></div><div class="line">    <span class="comment">//resizableImageWithCapInsets默认是平铺</span></div><div class="line">    <span class="comment">//resizableImageWithCapInsets默认情况对比图</span></div><div class="line">    <span class="comment">//testImage3 = [testImage3 resizableImageWithCapInsets:UIEdgeInsetsMake(0, 0, 0, 0) resizingMode:UIImageResizingModeTile];</span></div><div class="line">    </div><div class="line">    <span class="comment">/***********************************************/</span></div><div class="line">    <span class="comment">//resizableImageWithCapInsets: resizingMode: 方法</span></div><div class="line">    <span class="comment">//  UIImageResizingModeTile,     平铺 (已经测试过了,)</span></div><div class="line">    <span class="comment">//  UIImageResizingModeStretch,  拉伸</span></div><div class="line">    <span class="comment">//testImage3 = [testImage3 resizableImageWithCapInsets:UIEdgeInsetsMake(0, 0, 0, 0) resizingMode:UIImageResizingModeStretch];</span></div><div class="line">    <span class="comment">/***********************************************/</span></div><div class="line"></div><div class="line">    <span class="comment">//将图片添加到相框</span></div><div class="line">    <span class="keyword">self</span>.imageView3.image = testImage3;</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;让我们深入分析下 resizableImageWithCapInsets: 方法&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sketchk.xyz/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://sketchk.xyz/tags/iOS/"/>
    
  </entry>
  
</feed>
